
F_me.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000017b8  0000184c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000166  00800150  00800150  0000189c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a85f  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000202a  00000000  00000000  0000c58b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022b2  00000000  00000000  0000e5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b64  00000000  00000000  00010868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000264e  00000000  00000000  000113cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c96  00000000  00000000  00013a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  000176b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_18>
      4c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_19>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_24>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
      ae:	d2 04       	cpc	r13, r2
      b0:	4c 08       	sbc	r4, r12

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e8 eb       	ldi	r30, 0xB8	; 184
      c6:	f7 e1       	ldi	r31, 0x17	; 23
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a0 35       	cpi	r26, 0x50	; 80
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	22 e0       	ldi	r18, 0x02	; 2
      d6:	a0 e5       	ldi	r26, 0x50	; 80
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a6 3b       	cpi	r26, 0xB6	; 182
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	c9 e5       	ldi	r28, 0x59	; 89
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_global_ctors+0x10>
      ec:	21 97       	sbiw	r28, 0x01	; 1
      ee:	fe 01       	movw	r30, r28
      f0:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__tablejump2__>
      f4:	c7 35       	cpi	r28, 0x57	; 87
      f6:	d1 07       	cpc	r29, r17
      f8:	c9 f7       	brne	.-14     	; 0xec <__do_global_ctors+0x8>
      fa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <main>
      fe:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <setup>:


int ADXLAddress = 0x27; // Device address in which is also included the 8th bit for selecting the mode, read in this case.
int X0,X1,X_out;
void setup() {
  Wire.begin(); // Initiate the Wire library
     106:	8e eb       	ldi	r24, 0xBE	; 190
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7TwoWire5beginEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	40 e8       	ldi	r20, 0x80	; 128
     112:	55 e2       	ldi	r21, 0x25	; 37
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e1       	ldi	r24, 0x10	; 16
     11a:	92 e0       	ldi	r25, 0x02	; 2
     11c:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  delay(100);
     120:	64 e6       	ldi	r22, 0x64	; 100
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <delay>

0000012c <loop>:
  
  // Enable measurement
}
void loop() {
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	00 d0       	rcall	.+0      	; 0x13a <loop+0xe>
     13a:	00 d0       	rcall	.+0      	; 0x13c <loop+0x10>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
  uint8_t buf[4];
  Wire.beginTransmission(ADXLAddress);
     140:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <ADXLAddress>
     144:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <ADXLAddress+0x1>
     148:	8e eb       	ldi	r24, 0xBE	; 190
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     150:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <ADXLAddress>
     154:	8e eb       	ldi	r24, 0xBE	; 190
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 00 04 	call	0x800	; 0x800 <_ZN7TwoWire5writeEh>
  Wire.write(ADXLAddress);   // MSB
  //Wire.endTransmission();
  Wire.requestFrom(ADXLAddress,4 );
     15c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <ADXLAddress>
     160:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <ADXLAddress+0x1>
     164:	44 e0       	ldi	r20, 0x04	; 4
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	8e eb       	ldi	r24, 0xBE	; 190
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN7TwoWire11requestFromEii>
     170:	8e 01       	movw	r16, r28
     172:	0f 5f       	subi	r16, 0xFF	; 255
     174:	1f 4f       	sbci	r17, 0xFF	; 255
     176:	7e 01       	movw	r14, r28
     178:	85 e0       	ldi	r24, 0x05	; 5
     17a:	e8 0e       	add	r14, r24
     17c:	f1 1c       	adc	r15, r1
      buf[i]=Wire.read();
      i+=1;
      delay(40);
    }
  }
Wire.endTransmission();
     17e:	8e eb       	ldi	r24, 0xBE	; 190
     180:	91 e0       	ldi	r25, 0x01	; 1
  Wire.beginTransmission(ADXLAddress);
  Wire.write(ADXLAddress);   // MSB
  //Wire.endTransmission();
  Wire.requestFrom(ADXLAddress,4 );
  int i = 0;
  while (i<4) {
     182:	e0 16       	cp	r14, r16
     184:	f1 06       	cpc	r15, r17
     186:	91 f0       	breq	.+36     	; 0x1ac <loop+0x80>
    if (Wire.available()){
     188:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN7TwoWire9availableEv>
     18c:	89 2b       	or	r24, r25
     18e:	b9 f3       	breq	.-18     	; 0x17e <loop+0x52>
      buf[i]=Wire.read();
     190:	8e eb       	ldi	r24, 0xBE	; 190
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN7TwoWire4readEv>
     198:	f8 01       	movw	r30, r16
     19a:	81 93       	st	Z+, r24
     19c:	8f 01       	movw	r16, r30
      i+=1;
      delay(40);
     19e:	68 e2       	ldi	r22, 0x28	; 40
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 80 0a 	call	0x1500	; 0x1500 <delay>
     1aa:	e9 cf       	rjmp	.-46     	; 0x17e <loop+0x52>
    }
  }
Wire.endTransmission();
     1ac:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN7TwoWire15endTransmissionEv>
Serial.print(buf[0]);
     1b0:	f9 80       	ldd	r15, Y+1	; 0x01
     1b2:	4a e0       	ldi	r20, 0x0A	; 10
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	6f 2d       	mov	r22, r15
     1b8:	80 e1       	ldi	r24, 0x10	; 16
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN5Print5printEhi>
Serial.print("\t");
     1c0:	62 e0       	ldi	r22, 0x02	; 2
     1c2:	71 e0       	ldi	r23, 0x01	; 1
     1c4:	80 e1       	ldi	r24, 0x10	; 16
     1c6:	92 e0       	ldi	r25, 0x02	; 2
     1c8:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
Serial.print(buf[1]);
     1cc:	ea 80       	ldd	r14, Y+2	; 0x02
     1ce:	4a e0       	ldi	r20, 0x0A	; 10
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	6e 2d       	mov	r22, r14
     1d4:	80 e1       	ldi	r24, 0x10	; 16
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN5Print5printEhi>
Serial.print("\t");
     1dc:	62 e0       	ldi	r22, 0x02	; 2
     1de:	71 e0       	ldi	r23, 0x01	; 1
     1e0:	80 e1       	ldi	r24, 0x10	; 16
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
Serial.print(buf[2]);
     1e8:	0b 81       	ldd	r16, Y+3	; 0x03
     1ea:	4a e0       	ldi	r20, 0x0A	; 10
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	60 2f       	mov	r22, r16
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN5Print5printEhi>
Serial.print("\t");
     1f8:	62 e0       	ldi	r22, 0x02	; 2
     1fa:	71 e0       	ldi	r23, 0x01	; 1
     1fc:	80 e1       	ldi	r24, 0x10	; 16
     1fe:	92 e0       	ldi	r25, 0x02	; 2
     200:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
Serial.print(buf[3]);
     204:	1c 81       	ldd	r17, Y+4	; 0x04
     206:	4a e0       	ldi	r20, 0x0A	; 10
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	61 2f       	mov	r22, r17
     20c:	80 e1       	ldi	r24, 0x10	; 16
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN5Print5printEhi>
Serial.print("\n");
     214:	62 e4       	ldi	r22, 0x42	; 66
     216:	71 e0       	ldi	r23, 0x01	; 1
     218:	80 e1       	ldi	r24, 0x10	; 16
     21a:	92 e0       	ldi	r25, 0x02	; 2
     21c:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
  int reading_hum = (buf[0] << 8) + buf[1];
  double humidity = reading_hum / 16382.0 * 100.0;
  Serial.print("humidity: ");
     220:	64 e0       	ldi	r22, 0x04	; 4
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	80 e1       	ldi	r24, 0x10	; 16
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
  Serial.print(humidity);
     22c:	6f 2d       	mov	r22, r15
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	76 2f       	mov	r23, r22
     232:	66 27       	eor	r22, r22
     234:	6e 0d       	add	r22, r14
     236:	71 1d       	adc	r23, r1
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__floatsisf>
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	38 ef       	ldi	r19, 0xF8	; 248
     248:	4f e7       	ldi	r20, 0x7F	; 127
     24a:	56 e4       	ldi	r21, 0x46	; 70
     24c:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	48 ec       	ldi	r20, 0xC8	; 200
     256:	52 e4       	ldi	r21, 0x42	; 66
     258:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsf3>
     25c:	ab 01       	movw	r20, r22
     25e:	bc 01       	movw	r22, r24
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	80 e1       	ldi	r24, 0x10	; 16
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN5Print5printEdi>
  Serial.print("\n");
     26c:	62 e4       	ldi	r22, 0x42	; 66
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	80 e1       	ldi	r24, 0x10	; 16
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>

  int reading_temp = (buf[2] << 6) + (buf[3] >> 2);
  double temperature = reading_temp / 16382.0 * 165.0 - 40;
  Serial.print("Temperature: ");
     278:	6f e0       	ldi	r22, 0x0F	; 15
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	80 e1       	ldi	r24, 0x10	; 16
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>
  Serial.print(temperature);
     284:	61 2f       	mov	r22, r17
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	75 95       	asr	r23
     28a:	67 95       	ror	r22
     28c:	75 95       	asr	r23
     28e:	67 95       	ror	r22
     290:	f0 e4       	ldi	r31, 0x40	; 64
     292:	0f 9f       	mul	r16, r31
     294:	60 0d       	add	r22, r0
     296:	71 1d       	adc	r23, r1
     298:	11 24       	eor	r1, r1
     29a:	07 2e       	mov	r0, r23
     29c:	00 0c       	add	r0, r0
     29e:	88 0b       	sbc	r24, r24
     2a0:	99 0b       	sbc	r25, r25
     2a2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__floatsisf>
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	38 ef       	ldi	r19, 0xF8	; 248
     2aa:	4f e7       	ldi	r20, 0x7F	; 127
     2ac:	56 e4       	ldi	r21, 0x46	; 70
     2ae:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	45 e2       	ldi	r20, 0x25	; 37
     2b8:	53 e4       	ldi	r21, 0x43	; 67
     2ba:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e2       	ldi	r20, 0x20	; 32
     2c4:	52 e4       	ldi	r21, 0x42	; 66
     2c6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
     2ca:	ab 01       	movw	r20, r22
     2cc:	bc 01       	movw	r22, r24
     2ce:	22 e0       	ldi	r18, 0x02	; 2
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	80 e1       	ldi	r24, 0x10	; 16
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN5Print5printEdi>
  Serial.print("\n");  
     2da:	62 e4       	ldi	r22, 0x42	; 66
     2dc:	71 e0       	ldi	r23, 0x01	; 1
     2de:	80 e1       	ldi	r24, 0x10	; 16
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN5Print5printEPKc>

  delay(1000);
     2e6:	68 ee       	ldi	r22, 0xE8	; 232
     2e8:	73 e0       	ldi	r23, 0x03	; 3
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
}
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
  double temperature = reading_temp / 16382.0 * 165.0 - 40;
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print("\n");  

  delay(1000);
     302:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <delay>

00000306 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     306:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <twi_state>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <twi_sendStop>
     310:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_inRepStart>
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	82 e1       	ldi	r24, 0x12	; 18
     318:	0e 94 20 0b 	call	0x1640	; 0x1640 <digitalWrite>
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	83 e1       	ldi	r24, 0x13	; 19
     320:	0e 94 20 0b 	call	0x1640	; 0x1640 <digitalWrite>
     324:	e9 eb       	ldi	r30, 0xB9	; 185
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8e 7f       	andi	r24, 0xFE	; 254
     32c:	80 83       	st	Z, r24
     32e:	80 81       	ld	r24, Z
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 83       	st	Z, r24
     334:	88 e4       	ldi	r24, 0x48	; 72
     336:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     33a:	85 e4       	ldi	r24, 0x45	; 69
     33c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     340:	08 95       	ret

00000342 <twi_readFrom>:
     342:	41 32       	cpi	r20, 0x21	; 33
     344:	08 f0       	brcs	.+2      	; 0x348 <twi_readFrom+0x6>
     346:	43 c0       	rjmp	.+134    	; 0x3ce <twi_readFrom+0x8c>
     348:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <twi_state>
     34c:	91 11       	cpse	r25, r1
     34e:	fc cf       	rjmp	.-8      	; 0x348 <twi_readFrom+0x6>
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <twi_state>
     356:	20 93 bb 01 	sts	0x01BB, r18	; 0x8001bb <twi_sendStop>
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     360:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <twi_masterBufferIndex>
     364:	24 0f       	add	r18, r20
     366:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <twi_masterBufferLength>
     36a:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <twi_slarw>
     36e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <twi_slarw>
     372:	88 0f       	add	r24, r24
     374:	89 2b       	or	r24, r25
     376:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <twi_slarw>
     37a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_inRepStart>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	61 f4       	brne	.+24     	; 0x39a <twi_readFrom+0x58>
     382:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_inRepStart>
     386:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twi_slarw>
     38a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     38e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     392:	83 fd       	sbrc	r24, 3
     394:	f8 cf       	rjmp	.-16     	; 0x386 <twi_readFrom+0x44>
     396:	85 ec       	ldi	r24, 0xC5	; 197
     398:	01 c0       	rjmp	.+2      	; 0x39c <twi_readFrom+0x5a>
     39a:	85 ee       	ldi	r24, 0xE5	; 229
     39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <twi_state>
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	e1 f3       	breq	.-8      	; 0x3a0 <twi_readFrom+0x5e>
     3a8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <twi_masterBufferIndex>
     3ac:	84 17       	cp	r24, r20
     3ae:	10 f4       	brcc	.+4      	; 0x3b4 <twi_readFrom+0x72>
     3b0:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <twi_masterBufferIndex>
     3b4:	a6 e9       	ldi	r26, 0x96	; 150
     3b6:	b1 e0       	ldi	r27, 0x01	; 1
     3b8:	96 2f       	mov	r25, r22
     3ba:	fb 01       	movw	r30, r22
     3bc:	8e 2f       	mov	r24, r30
     3be:	89 1b       	sub	r24, r25
     3c0:	84 17       	cp	r24, r20
     3c2:	18 f4       	brcc	.+6      	; 0x3ca <twi_readFrom+0x88>
     3c4:	8d 91       	ld	r24, X+
     3c6:	81 93       	st	Z+, r24
     3c8:	f9 cf       	rjmp	.-14     	; 0x3bc <twi_readFrom+0x7a>
     3ca:	84 2f       	mov	r24, r20
     3cc:	08 95       	ret
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	08 95       	ret

000003d2 <twi_writeTo>:
     3d2:	0f 93       	push	r16
     3d4:	41 32       	cpi	r20, 0x21	; 33
     3d6:	08 f0       	brcs	.+2      	; 0x3da <twi_writeTo+0x8>
     3d8:	4a c0       	rjmp	.+148    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3da:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <twi_state>
     3de:	91 11       	cpse	r25, r1
     3e0:	fc cf       	rjmp	.-8      	; 0x3da <twi_writeTo+0x8>
     3e2:	32 e0       	ldi	r19, 0x02	; 2
     3e4:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <twi_state>
     3e8:	00 93 bb 01 	sts	0x01BB, r16	; 0x8001bb <twi_sendStop>
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <__data_end>
     3f2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <twi_masterBufferIndex>
     3f6:	40 93 94 01 	sts	0x0194, r20	; 0x800194 <twi_masterBufferLength>
     3fa:	56 2f       	mov	r21, r22
     3fc:	a6 e9       	ldi	r26, 0x96	; 150
     3fe:	b1 e0       	ldi	r27, 0x01	; 1
     400:	fb 01       	movw	r30, r22
     402:	3e 2f       	mov	r19, r30
     404:	35 1b       	sub	r19, r21
     406:	34 17       	cp	r19, r20
     408:	18 f4       	brcc	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	31 91       	ld	r19, Z+
     40c:	3d 93       	st	X+, r19
     40e:	f9 cf       	rjmp	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     410:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <twi_slarw>
     414:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <twi_slarw>
     418:	88 0f       	add	r24, r24
     41a:	83 2b       	or	r24, r19
     41c:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <twi_slarw>
     420:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_inRepStart>
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	61 f4       	brne	.+24     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     428:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_inRepStart>
     42c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twi_slarw>
     430:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     434:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     438:	83 fd       	sbrc	r24, 3
     43a:	f8 cf       	rjmp	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     43c:	85 ec       	ldi	r24, 0xC5	; 197
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	85 ee       	ldi	r24, 0xE5	; 229
     442:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     446:	22 23       	and	r18, r18
     448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     44a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <twi_state>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	d1 f3       	breq	.-12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     452:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     456:	8f 3f       	cpi	r24, 0xFF	; 255
     458:	79 f0       	breq	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     45a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     45e:	80 32       	cpi	r24, 0x20	; 32
     460:	41 f0       	breq	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     462:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     466:	80 33       	cpi	r24, 0x30	; 48
     468:	31 f0       	breq	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46a:	94 e0       	ldi	r25, 0x04	; 4
     46c:	05 c0       	rjmp	.+10     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	03 c0       	rjmp	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	01 c0       	rjmp	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	89 2f       	mov	r24, r25
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <twi_transmit>:
     47e:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <twi_txBufferLength>
     482:	26 2f       	mov	r18, r22
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	24 0f       	add	r18, r20
     488:	31 1d       	adc	r19, r1
     48a:	21 32       	cpi	r18, 0x21	; 33
     48c:	31 05       	cpc	r19, r1
     48e:	dc f4       	brge	.+54     	; 0x4c6 <twi_transmit+0x48>
     490:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <twi_state>
     494:	24 30       	cpi	r18, 0x04	; 4
     496:	c9 f4       	brne	.+50     	; 0x4ca <twi_transmit+0x4c>
     498:	fc 01       	movw	r30, r24
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	86 17       	cp	r24, r22
     4a0:	58 f4       	brcc	.+22     	; 0x4b8 <twi_transmit+0x3a>
     4a2:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <twi_txBufferLength>
     4a6:	21 91       	ld	r18, Z+
     4a8:	dc 01       	movw	r26, r24
     4aa:	ac 58       	subi	r26, 0x8C	; 140
     4ac:	be 4f       	sbci	r27, 0xFE	; 254
     4ae:	a3 0f       	add	r26, r19
     4b0:	b1 1d       	adc	r27, r1
     4b2:	2c 93       	st	X, r18
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	f3 cf       	rjmp	.-26     	; 0x49e <twi_transmit+0x20>
     4b8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_txBufferLength>
     4bc:	68 0f       	add	r22, r24
     4be:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <twi_txBufferLength>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	08 95       	ret
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	08 95       	ret

000004ce <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4ce:	85 ed       	ldi	r24, 0xD5	; 213
     4d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4d8:	84 fd       	sbrc	r24, 4
     4da:	fc cf       	rjmp	.-8      	; 0x4d4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     4dc:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <twi_state>
     4e0:	08 95       	ret

000004e2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     4e2:	85 ec       	ldi	r24, 0xC5	; 197
     4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     4e8:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <twi_state>
     4ec:	08 95       	ret

000004ee <__vector_24>:
}

ISR(TWI_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
  switch(TW_STATUS){
     510:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     514:	88 7f       	andi	r24, 0xF8	; 248
     516:	80 36       	cpi	r24, 0x60	; 96
     518:	09 f4       	brne	.+2      	; 0x51c <__vector_24+0x2e>
     51a:	9e c0       	rjmp	.+316    	; 0x658 <__vector_24+0x16a>
     51c:	78 f5       	brcc	.+94     	; 0x57c <__vector_24+0x8e>
     51e:	88 32       	cpi	r24, 0x28	; 40
     520:	09 f4       	brne	.+2      	; 0x524 <__vector_24+0x36>
     522:	5d c0       	rjmp	.+186    	; 0x5de <__vector_24+0xf0>
     524:	90 f4       	brcc	.+36     	; 0x54a <__vector_24+0x5c>
     526:	80 31       	cpi	r24, 0x10	; 16
     528:	09 f4       	brne	.+2      	; 0x52c <__vector_24+0x3e>
     52a:	56 c0       	rjmp	.+172    	; 0x5d8 <__vector_24+0xea>
     52c:	38 f4       	brcc	.+14     	; 0x53c <__vector_24+0x4e>
     52e:	88 23       	and	r24, r24
     530:	09 f4       	brne	.+2      	; 0x534 <__vector_24+0x46>
     532:	f5 c0       	rjmp	.+490    	; 0x71e <__vector_24+0x230>
     534:	88 30       	cpi	r24, 0x08	; 8
     536:	09 f4       	brne	.+2      	; 0x53a <__vector_24+0x4c>
     538:	4f c0       	rjmp	.+158    	; 0x5d8 <__vector_24+0xea>
     53a:	f5 c0       	rjmp	.+490    	; 0x726 <__vector_24+0x238>
     53c:	88 31       	cpi	r24, 0x18	; 24
     53e:	09 f4       	brne	.+2      	; 0x542 <__vector_24+0x54>
     540:	4e c0       	rjmp	.+156    	; 0x5de <__vector_24+0xf0>
     542:	80 32       	cpi	r24, 0x20	; 32
     544:	09 f4       	brne	.+2      	; 0x548 <__vector_24+0x5a>
     546:	5f c0       	rjmp	.+190    	; 0x606 <__vector_24+0x118>
     548:	ee c0       	rjmp	.+476    	; 0x726 <__vector_24+0x238>
     54a:	80 34       	cpi	r24, 0x40	; 64
     54c:	09 f4       	brne	.+2      	; 0x550 <__vector_24+0x62>
     54e:	6a c0       	rjmp	.+212    	; 0x624 <__vector_24+0x136>
     550:	58 f4       	brcc	.+22     	; 0x568 <__vector_24+0x7a>
     552:	80 33       	cpi	r24, 0x30	; 48
     554:	09 f4       	brne	.+2      	; 0x558 <__vector_24+0x6a>
     556:	57 c0       	rjmp	.+174    	; 0x606 <__vector_24+0x118>
     558:	88 33       	cpi	r24, 0x38	; 56
     55a:	09 f0       	breq	.+2      	; 0x55e <__vector_24+0x70>
     55c:	e4 c0       	rjmp	.+456    	; 0x726 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     55e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
      twi_releaseBus();
     562:	0e 94 71 02 	call	0x4e2	; 0x4e2 <twi_releaseBus>
      break;
     566:	df c0       	rjmp	.+446    	; 0x726 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     568:	80 35       	cpi	r24, 0x50	; 80
     56a:	09 f4       	brne	.+2      	; 0x56e <__vector_24+0x80>
     56c:	4f c0       	rjmp	.+158    	; 0x60c <__vector_24+0x11e>
     56e:	88 35       	cpi	r24, 0x58	; 88
     570:	09 f4       	brne	.+2      	; 0x574 <__vector_24+0x86>
     572:	5d c0       	rjmp	.+186    	; 0x62e <__vector_24+0x140>
     574:	88 34       	cpi	r24, 0x48	; 72
     576:	09 f0       	breq	.+2      	; 0x57a <__vector_24+0x8c>
     578:	d6 c0       	rjmp	.+428    	; 0x726 <__vector_24+0x238>
     57a:	d3 c0       	rjmp	.+422    	; 0x722 <__vector_24+0x234>
     57c:	88 39       	cpi	r24, 0x98	; 152
     57e:	09 f4       	brne	.+2      	; 0x582 <__vector_24+0x94>
     580:	c4 c0       	rjmp	.+392    	; 0x70a <__vector_24+0x21c>
     582:	a8 f4       	brcc	.+42     	; 0x5ae <__vector_24+0xc0>
     584:	88 37       	cpi	r24, 0x78	; 120
     586:	09 f4       	brne	.+2      	; 0x58a <__vector_24+0x9c>
     588:	67 c0       	rjmp	.+206    	; 0x658 <__vector_24+0x16a>
     58a:	38 f4       	brcc	.+14     	; 0x59a <__vector_24+0xac>
     58c:	88 36       	cpi	r24, 0x68	; 104
     58e:	09 f4       	brne	.+2      	; 0x592 <__vector_24+0xa4>
     590:	63 c0       	rjmp	.+198    	; 0x658 <__vector_24+0x16a>
     592:	80 37       	cpi	r24, 0x70	; 112
     594:	09 f4       	brne	.+2      	; 0x598 <__vector_24+0xaa>
     596:	60 c0       	rjmp	.+192    	; 0x658 <__vector_24+0x16a>
     598:	c6 c0       	rjmp	.+396    	; 0x726 <__vector_24+0x238>
     59a:	88 38       	cpi	r24, 0x88	; 136
     59c:	09 f4       	brne	.+2      	; 0x5a0 <__vector_24+0xb2>
     59e:	b5 c0       	rjmp	.+362    	; 0x70a <__vector_24+0x21c>
     5a0:	80 39       	cpi	r24, 0x90	; 144
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__vector_24+0xb8>
     5a4:	5f c0       	rjmp	.+190    	; 0x664 <__vector_24+0x176>
     5a6:	80 38       	cpi	r24, 0x80	; 128
     5a8:	09 f0       	breq	.+2      	; 0x5ac <__vector_24+0xbe>
     5aa:	bd c0       	rjmp	.+378    	; 0x726 <__vector_24+0x238>
     5ac:	5b c0       	rjmp	.+182    	; 0x664 <__vector_24+0x176>
     5ae:	80 3b       	cpi	r24, 0xB0	; 176
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <__vector_24+0xc6>
     5b2:	83 c0       	rjmp	.+262    	; 0x6ba <__vector_24+0x1cc>
     5b4:	38 f4       	brcc	.+14     	; 0x5c4 <__vector_24+0xd6>
     5b6:	80 3a       	cpi	r24, 0xA0	; 160
     5b8:	09 f4       	brne	.+2      	; 0x5bc <__vector_24+0xce>
     5ba:	66 c0       	rjmp	.+204    	; 0x688 <__vector_24+0x19a>
     5bc:	88 3a       	cpi	r24, 0xA8	; 168
     5be:	09 f4       	brne	.+2      	; 0x5c2 <__vector_24+0xd4>
     5c0:	7c c0       	rjmp	.+248    	; 0x6ba <__vector_24+0x1cc>
     5c2:	b1 c0       	rjmp	.+354    	; 0x726 <__vector_24+0x238>
     5c4:	80 3c       	cpi	r24, 0xC0	; 192
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__vector_24+0xdc>
     5c8:	a4 c0       	rjmp	.+328    	; 0x712 <__vector_24+0x224>
     5ca:	88 3c       	cpi	r24, 0xC8	; 200
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <__vector_24+0xe2>
     5ce:	a1 c0       	rjmp	.+322    	; 0x712 <__vector_24+0x224>
     5d0:	88 3b       	cpi	r24, 0xB8	; 184
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <__vector_24+0xe8>
     5d4:	87 c0       	rjmp	.+270    	; 0x6e4 <__vector_24+0x1f6>
     5d6:	a7 c0       	rjmp	.+334    	; 0x726 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5d8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twi_slarw>
     5dc:	10 c0       	rjmp	.+32     	; 0x5fe <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5de:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <twi_masterBufferIndex>
     5e2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <twi_masterBufferLength>
     5e6:	98 17       	cp	r25, r24
     5e8:	70 f5       	brcc	.+92     	; 0x646 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5ea:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	8e 0f       	add	r24, r30
     5f2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ea 56       	subi	r30, 0x6A	; 106
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	80 81       	ld	r24, Z
     5fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     602:	85 ec       	ldi	r24, 0xC5	; 197
     604:	83 c0       	rjmp	.+262    	; 0x70c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     606:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
     60a:	8b c0       	rjmp	.+278    	; 0x722 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     60c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	8e 0f       	add	r24, r30
     614:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
     618:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ea 56       	subi	r30, 0x6A	; 106
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     624:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <twi_masterBufferIndex>
     628:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <twi_masterBufferLength>
     62c:	6b c0       	rjmp	.+214    	; 0x704 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     62e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <twi_masterBufferIndex>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	8e 0f       	add	r24, r30
     636:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <twi_masterBufferIndex>
     63a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ea 56       	subi	r30, 0x6A	; 106
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	80 83       	st	Z, r24
	if (twi_sendStop)
     646:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <twi_sendStop>
     64a:	81 11       	cpse	r24, r1
     64c:	6a c0       	rjmp	.+212    	; 0x722 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     654:	84 ea       	ldi	r24, 0xA4	; 164
     656:	5e c0       	rjmp	.+188    	; 0x714 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     65e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <twi_rxBufferIndex>
     662:	cf cf       	rjmp	.-98     	; 0x602 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     664:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_rxBufferIndex>
     668:	80 32       	cpi	r24, 0x20	; 32
     66a:	08 f0       	brcs	.+2      	; 0x66e <__vector_24+0x180>
     66c:	4e c0       	rjmp	.+156    	; 0x70a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     66e:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <twi_rxBufferIndex>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	8e 0f       	add	r24, r30
     676:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <twi_rxBufferIndex>
     67a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ee 5a       	subi	r30, 0xAE	; 174
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	80 83       	st	Z, r24
     686:	bd cf       	rjmp	.-134    	; 0x602 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     688:	0e 94 71 02 	call	0x4e2	; 0x4e2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     68c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_rxBufferIndex>
     690:	80 32       	cpi	r24, 0x20	; 32
     692:	30 f4       	brcc	.+12     	; 0x6a0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     694:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <twi_rxBufferIndex>
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	ee 5a       	subi	r30, 0xAE	; 174
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6a0:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <twi_rxBufferIndex>
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <twi_onSlaveReceive>
     6aa:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <twi_onSlaveReceive+0x1>
     6ae:	82 e5       	ldi	r24, 0x52	; 82
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     6b4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <twi_rxBufferIndex>
      break;
     6b8:	36 c0       	rjmp	.+108    	; 0x726 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     6c0:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     6c4:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     6c8:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <twi_onSlaveTransmit>
     6cc:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <twi_onSlaveTransmit+0x1>
     6d0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6d2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_txBufferLength>
     6d6:	81 11       	cpse	r24, r1
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     6e0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     6e4:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <twi_txBufferIndex>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	8e 0f       	add	r24, r30
     6ec:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <twi_txBufferIndex>
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 58       	subi	r30, 0x8C	; 140
     6f4:	fe 4f       	sbci	r31, 0xFE	; 254
     6f6:	80 81       	ld	r24, Z
     6f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     6fc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <twi_txBufferIndex>
     700:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_txBufferLength>
     704:	98 17       	cp	r25, r24
     706:	08 f4       	brcc	.+2      	; 0x70a <__vector_24+0x21c>
     708:	7c cf       	rjmp	.-264    	; 0x602 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     70a:	85 e8       	ldi	r24, 0x85	; 133
     70c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     710:	0a c0       	rjmp	.+20     	; 0x726 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     712:	85 ec       	ldi	r24, 0xC5	; 197
     714:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     718:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <twi_state>
      break;
     71c:	04 c0       	rjmp	.+8      	; 0x726 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     71e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
      twi_stop();
     722:	0e 94 67 02 	call	0x4ce	; 0x4ce <twi_stop>
      break;
  }
}
     726:	ff 91       	pop	r31
     728:	ef 91       	pop	r30
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	08 95       	ret

0000074e <_ZN7TwoWire9availableEv>:
     74e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_ZN7TwoWire14rxBufferLengthE>
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     758:	82 1b       	sub	r24, r18
     75a:	91 09       	sbc	r25, r1
     75c:	08 95       	ret

0000075e <_ZN7TwoWire4readEv>:
     75e:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     762:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_ZN7TwoWire14rxBufferLengthE>
     766:	98 17       	cp	r25, r24
     768:	50 f4       	brcc	.+20     	; 0x77e <_ZN7TwoWire4readEv+0x20>
     76a:	e9 2f       	mov	r30, r25
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	e0 51       	subi	r30, 0x10	; 16
     770:	fe 4f       	sbci	r31, 0xFE	; 254
     772:	20 81       	ld	r18, Z
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	9f 5f       	subi	r25, 0xFF	; 255
     778:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     77c:	02 c0       	rjmp	.+4      	; 0x782 <_ZN7TwoWire4readEv+0x24>
     77e:	2f ef       	ldi	r18, 0xFF	; 255
     780:	3f ef       	ldi	r19, 0xFF	; 255
     782:	c9 01       	movw	r24, r18
     784:	08 95       	ret

00000786 <_ZN7TwoWire4peekEv>:
     786:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     78a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_ZN7TwoWire14rxBufferLengthE>
     78e:	e8 17       	cp	r30, r24
     790:	30 f4       	brcc	.+12     	; 0x79e <_ZN7TwoWire4peekEv+0x18>
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	e0 51       	subi	r30, 0x10	; 16
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	80 81       	ld	r24, Z
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	08 95       	ret
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	08 95       	ret

000007a4 <_ZN7TwoWire5flushEv>:
     7a4:	08 95       	ret

000007a6 <_ZN7TwoWire5writeEPKhj>:
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	7c 01       	movw	r14, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	8a 01       	movw	r16, r20
     7bc:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <_ZN7TwoWire12transmittingE>
     7c0:	22 23       	and	r18, r18
     7c2:	89 f0       	breq	.+34     	; 0x7e6 <_ZN7TwoWire5writeEPKhj+0x40>
     7c4:	eb 01       	movw	r28, r22
     7c6:	6b 01       	movw	r12, r22
     7c8:	c4 0e       	add	r12, r20
     7ca:	d5 1e       	adc	r13, r21
     7cc:	cc 15       	cp	r28, r12
     7ce:	dd 05       	cpc	r29, r13
     7d0:	69 f0       	breq	.+26     	; 0x7ec <_ZN7TwoWire5writeEPKhj+0x46>
     7d2:	69 91       	ld	r22, Y+
     7d4:	d7 01       	movw	r26, r14
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	01 90       	ld	r0, Z+
     7dc:	f0 81       	ld	r31, Z
     7de:	e0 2d       	mov	r30, r0
     7e0:	c7 01       	movw	r24, r14
     7e2:	09 95       	icall
     7e4:	f3 cf       	rjmp	.-26     	; 0x7cc <_ZN7TwoWire5writeEPKhj+0x26>
     7e6:	64 2f       	mov	r22, r20
     7e8:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_transmit>
     7ec:	c8 01       	movw	r24, r16
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <_ZN7TwoWire5writeEh>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <_ZN7TwoWire12transmittingE>
     810:	22 23       	and	r18, r18
     812:	d1 f0       	breq	.+52     	; 0x848 <_ZN7TwoWire5writeEh+0x48>
     814:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     818:	20 32       	cpi	r18, 0x20	; 32
     81a:	40 f0       	brcs	.+16     	; 0x82c <_ZN7TwoWire5writeEh+0x2c>
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	fc 01       	movw	r30, r24
     822:	33 83       	std	Z+3, r19	; 0x03
     824:	22 83       	std	Z+2, r18	; 0x02
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	15 c0       	rjmp	.+42     	; 0x856 <_ZN7TwoWire5writeEh+0x56>
     82c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_ZN7TwoWire13txBufferIndexE>
     830:	e8 2f       	mov	r30, r24
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	e3 53       	subi	r30, 0x33	; 51
     836:	fe 4f       	sbci	r31, 0xFE	; 254
     838:	99 81       	ldd	r25, Y+1	; 0x01
     83a:	90 83       	st	Z, r25
     83c:	8f 5f       	subi	r24, 0xFF	; 255
     83e:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <_ZN7TwoWire13txBufferIndexE>
     842:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     846:	05 c0       	rjmp	.+10     	; 0x852 <_ZN7TwoWire5writeEh+0x52>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_transmit>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN7TwoWireC1Ev>:
     85e:	fc 01       	movw	r30, r24
     860:	13 82       	std	Z+3, r1	; 0x03
     862:	12 82       	std	Z+2, r1	; 0x02
     864:	88 ee       	ldi	r24, 0xE8	; 232
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	84 83       	std	Z+4, r24	; 0x04
     86e:	95 83       	std	Z+5, r25	; 0x05
     870:	a6 83       	std	Z+6, r26	; 0x06
     872:	b7 83       	std	Z+7, r27	; 0x07
     874:	81 e2       	ldi	r24, 0x21	; 33
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
     87c:	08 95       	ret

0000087e <_ZN7TwoWire5beginEv>:
     87e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     882:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <_ZN7TwoWire14rxBufferLengthE>
     886:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_ZN7TwoWire13txBufferIndexE>
     88a:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     88e:	0c 94 83 01 	jmp	0x306	; 0x306 <twi_init>

00000892 <_ZN7TwoWire17beginTransmissionEh>:
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZN7TwoWire12transmittingE>
     898:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <_ZN7TwoWire9txAddressE>
     89c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_ZN7TwoWire13txBufferIndexE>
     8a0:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     8a4:	08 95       	ret

000008a6 <_ZN7TwoWire17beginTransmissionEi>:
     8a6:	0c 94 49 04 	jmp	0x892	; 0x892 <_ZN7TwoWire17beginTransmissionEh>

000008aa <_ZN7TwoWire15endTransmissionEh>:
     8aa:	0f 93       	push	r16
     8ac:	06 2f       	mov	r16, r22
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     8b4:	6d ec       	ldi	r22, 0xCD	; 205
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <_ZN7TwoWire9txAddressE>
     8bc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <twi_writeTo>
     8c0:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_ZN7TwoWire13txBufferIndexE>
     8c4:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZN7TwoWire14txBufferLengthE>
     8c8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <_ZN7TwoWire12transmittingE>
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <_ZN7TwoWire11requestFromEhhmhh>:
     8d0:	4f 92       	push	r4
     8d2:	5f 92       	push	r5
     8d4:	6f 92       	push	r6
     8d6:	7f 92       	push	r7
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	5c 01       	movw	r10, r24
     8ec:	f6 2e       	mov	r15, r22
     8ee:	d4 2f       	mov	r29, r20
     8f0:	28 01       	movw	r4, r16
     8f2:	39 01       	movw	r6, r18
     8f4:	ee 20       	and	r14, r14
     8f6:	21 f1       	breq	.+72     	; 0x940 <__stack+0x41>
     8f8:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7TwoWire17beginTransmissionEh>
     8fc:	ce 2d       	mov	r28, r14
     8fe:	c4 30       	cpi	r28, 0x04	; 4
     900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0x5>
     902:	c3 e0       	ldi	r28, 0x03	; 3
     904:	c1 50       	subi	r28, 0x01	; 1
     906:	c0 f0       	brcs	.+48     	; 0x938 <__stack+0x39>
     908:	28 e0       	ldi	r18, 0x08	; 8
     90a:	c2 9f       	mul	r28, r18
     90c:	c0 01       	movw	r24, r0
     90e:	11 24       	eor	r1, r1
     910:	a3 01       	movw	r20, r6
     912:	92 01       	movw	r18, r4
     914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
     916:	56 95       	lsr	r21
     918:	47 95       	ror	r20
     91a:	37 95       	ror	r19
     91c:	27 95       	ror	r18
     91e:	8a 95       	dec	r24
     920:	d2 f7       	brpl	.-12     	; 0x916 <__stack+0x17>
     922:	ca 01       	movw	r24, r20
     924:	b9 01       	movw	r22, r18
     926:	d5 01       	movw	r26, r10
     928:	ed 91       	ld	r30, X+
     92a:	fc 91       	ld	r31, X
     92c:	01 90       	ld	r0, Z+
     92e:	f0 81       	ld	r31, Z
     930:	e0 2d       	mov	r30, r0
     932:	c5 01       	movw	r24, r10
     934:	09 95       	icall
     936:	e6 cf       	rjmp	.-52     	; 0x904 <__stack+0x5>
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	c5 01       	movw	r24, r10
     93c:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN7TwoWire15endTransmissionEh>
     940:	4d 2f       	mov	r20, r29
     942:	d1 32       	cpi	r29, 0x21	; 33
     944:	08 f0       	brcs	.+2      	; 0x948 <__stack+0x49>
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	2c 2d       	mov	r18, r12
     94a:	60 ef       	ldi	r22, 0xF0	; 240
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	8f 2d       	mov	r24, r15
     950:	0e 94 a1 01 	call	0x342	; 0x342 <twi_readFrom>
     954:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <_ZN7TwoWire13rxBufferIndexE>
     958:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <_ZN7TwoWire14rxBufferLengthE>
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	08 95       	ret

00000978 <_ZN7TwoWire11requestFromEhhh>:
     978:	cf 92       	push	r12
     97a:	ef 92       	push	r14
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	c2 2e       	mov	r12, r18
     982:	e1 2c       	mov	r14, r1
     984:	00 e0       	ldi	r16, 0x00	; 0
     986:	10 e0       	ldi	r17, 0x00	; 0
     988:	98 01       	movw	r18, r16
     98a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN7TwoWire11requestFromEhhmhh>
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ef 90       	pop	r14
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <_ZN7TwoWire11requestFromEii>:
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	0c 94 bc 04 	jmp	0x978	; 0x978 <_ZN7TwoWire11requestFromEhhh>

0000099e <_ZN7TwoWire15endTransmissionEv>:
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_ZN7TwoWire15endTransmissionEh>

000009a4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     9a4:	8e eb       	ldi	r24, 0xBE	; 190
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_ZN7TwoWireC1Ev>

000009ac <__subsf3>:
     9ac:	50 58       	subi	r21, 0x80	; 128

000009ae <__addsf3>:
     9ae:	bb 27       	eor	r27, r27
     9b0:	aa 27       	eor	r26, r26
     9b2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
     9b6:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_round>
     9ba:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_pscA>
     9be:	38 f0       	brcs	.+14     	; 0x9ce <__addsf3+0x20>
     9c0:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscB>
     9c4:	20 f0       	brcs	.+8      	; 0x9ce <__addsf3+0x20>
     9c6:	39 f4       	brne	.+14     	; 0x9d6 <__addsf3+0x28>
     9c8:	9f 3f       	cpi	r25, 0xFF	; 255
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__addsf3+0x24>
     9cc:	26 f4       	brtc	.+8      	; 0x9d6 <__addsf3+0x28>
     9ce:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_nan>
     9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3+0x28>
     9d4:	e0 95       	com	r30
     9d6:	e7 fb       	bst	r30, 7
     9d8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_inf>

000009dc <__addsf3x>:
     9dc:	e9 2f       	mov	r30, r25
     9de:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_split3>
     9e2:	58 f3       	brcs	.-42     	; 0x9ba <__addsf3+0xc>
     9e4:	ba 17       	cp	r27, r26
     9e6:	62 07       	cpc	r22, r18
     9e8:	73 07       	cpc	r23, r19
     9ea:	84 07       	cpc	r24, r20
     9ec:	95 07       	cpc	r25, r21
     9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3x+0x1c>
     9f0:	79 f4       	brne	.+30     	; 0xa10 <__addsf3x+0x34>
     9f2:	a6 f5       	brtc	.+104    	; 0xa5c <__addsf3x+0x80>
     9f4:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_zero>
     9f8:	0e f4       	brtc	.+2      	; 0x9fc <__addsf3x+0x20>
     9fa:	e0 95       	com	r30
     9fc:	0b 2e       	mov	r0, r27
     9fe:	ba 2f       	mov	r27, r26
     a00:	a0 2d       	mov	r26, r0
     a02:	0b 01       	movw	r0, r22
     a04:	b9 01       	movw	r22, r18
     a06:	90 01       	movw	r18, r0
     a08:	0c 01       	movw	r0, r24
     a0a:	ca 01       	movw	r24, r20
     a0c:	a0 01       	movw	r20, r0
     a0e:	11 24       	eor	r1, r1
     a10:	ff 27       	eor	r31, r31
     a12:	59 1b       	sub	r21, r25
     a14:	99 f0       	breq	.+38     	; 0xa3c <__addsf3x+0x60>
     a16:	59 3f       	cpi	r21, 0xF9	; 249
     a18:	50 f4       	brcc	.+20     	; 0xa2e <__addsf3x+0x52>
     a1a:	50 3e       	cpi	r21, 0xE0	; 224
     a1c:	68 f1       	brcs	.+90     	; 0xa78 <__addsf3x+0x9c>
     a1e:	1a 16       	cp	r1, r26
     a20:	f0 40       	sbci	r31, 0x00	; 0
     a22:	a2 2f       	mov	r26, r18
     a24:	23 2f       	mov	r18, r19
     a26:	34 2f       	mov	r19, r20
     a28:	44 27       	eor	r20, r20
     a2a:	58 5f       	subi	r21, 0xF8	; 248
     a2c:	f3 cf       	rjmp	.-26     	; 0xa14 <__addsf3x+0x38>
     a2e:	46 95       	lsr	r20
     a30:	37 95       	ror	r19
     a32:	27 95       	ror	r18
     a34:	a7 95       	ror	r26
     a36:	f0 40       	sbci	r31, 0x00	; 0
     a38:	53 95       	inc	r21
     a3a:	c9 f7       	brne	.-14     	; 0xa2e <__addsf3x+0x52>
     a3c:	7e f4       	brtc	.+30     	; 0xa5c <__addsf3x+0x80>
     a3e:	1f 16       	cp	r1, r31
     a40:	ba 0b       	sbc	r27, r26
     a42:	62 0b       	sbc	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	84 0b       	sbc	r24, r20
     a48:	ba f0       	brmi	.+46     	; 0xa78 <__addsf3x+0x9c>
     a4a:	91 50       	subi	r25, 0x01	; 1
     a4c:	a1 f0       	breq	.+40     	; 0xa76 <__addsf3x+0x9a>
     a4e:	ff 0f       	add	r31, r31
     a50:	bb 1f       	adc	r27, r27
     a52:	66 1f       	adc	r22, r22
     a54:	77 1f       	adc	r23, r23
     a56:	88 1f       	adc	r24, r24
     a58:	c2 f7       	brpl	.-16     	; 0xa4a <__addsf3x+0x6e>
     a5a:	0e c0       	rjmp	.+28     	; 0xa78 <__addsf3x+0x9c>
     a5c:	ba 0f       	add	r27, r26
     a5e:	62 1f       	adc	r22, r18
     a60:	73 1f       	adc	r23, r19
     a62:	84 1f       	adc	r24, r20
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__addsf3x+0x9c>
     a66:	87 95       	ror	r24
     a68:	77 95       	ror	r23
     a6a:	67 95       	ror	r22
     a6c:	b7 95       	ror	r27
     a6e:	f7 95       	ror	r31
     a70:	9e 3f       	cpi	r25, 0xFE	; 254
     a72:	08 f0       	brcs	.+2      	; 0xa76 <__addsf3x+0x9a>
     a74:	b0 cf       	rjmp	.-160    	; 0x9d6 <__addsf3+0x28>
     a76:	93 95       	inc	r25
     a78:	88 0f       	add	r24, r24
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0xa2>
     a7c:	99 27       	eor	r25, r25
     a7e:	ee 0f       	add	r30, r30
     a80:	97 95       	ror	r25
     a82:	87 95       	ror	r24
     a84:	08 95       	ret

00000a86 <__divsf3>:
     a86:	0e 94 57 05 	call	0xaae	; 0xaae <__divsf3x>
     a8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_round>
     a8e:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscB>
     a92:	58 f0       	brcs	.+22     	; 0xaaa <__divsf3+0x24>
     a94:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_pscA>
     a98:	40 f0       	brcs	.+16     	; 0xaaa <__divsf3+0x24>
     a9a:	29 f4       	brne	.+10     	; 0xaa6 <__divsf3+0x20>
     a9c:	5f 3f       	cpi	r21, 0xFF	; 255
     a9e:	29 f0       	breq	.+10     	; 0xaaa <__divsf3+0x24>
     aa0:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_inf>
     aa4:	51 11       	cpse	r21, r1
     aa6:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>
     aaa:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_nan>

00000aae <__divsf3x>:
     aae:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_split3>
     ab2:	68 f3       	brcs	.-38     	; 0xa8e <__divsf3+0x8>

00000ab4 <__divsf3_pse>:
     ab4:	99 23       	and	r25, r25
     ab6:	b1 f3       	breq	.-20     	; 0xaa4 <__divsf3+0x1e>
     ab8:	55 23       	and	r21, r21
     aba:	91 f3       	breq	.-28     	; 0xaa0 <__divsf3+0x1a>
     abc:	95 1b       	sub	r25, r21
     abe:	55 0b       	sbc	r21, r21
     ac0:	bb 27       	eor	r27, r27
     ac2:	aa 27       	eor	r26, r26
     ac4:	62 17       	cp	r22, r18
     ac6:	73 07       	cpc	r23, r19
     ac8:	84 07       	cpc	r24, r20
     aca:	38 f0       	brcs	.+14     	; 0xada <__divsf3_pse+0x26>
     acc:	9f 5f       	subi	r25, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	22 0f       	add	r18, r18
     ad2:	33 1f       	adc	r19, r19
     ad4:	44 1f       	adc	r20, r20
     ad6:	aa 1f       	adc	r26, r26
     ad8:	a9 f3       	breq	.-22     	; 0xac4 <__divsf3_pse+0x10>
     ada:	35 d0       	rcall	.+106    	; 0xb46 <__divsf3_pse+0x92>
     adc:	0e 2e       	mov	r0, r30
     ade:	3a f0       	brmi	.+14     	; 0xaee <__divsf3_pse+0x3a>
     ae0:	e0 e8       	ldi	r30, 0x80	; 128
     ae2:	32 d0       	rcall	.+100    	; 0xb48 <__divsf3_pse+0x94>
     ae4:	91 50       	subi	r25, 0x01	; 1
     ae6:	50 40       	sbci	r21, 0x00	; 0
     ae8:	e6 95       	lsr	r30
     aea:	00 1c       	adc	r0, r0
     aec:	ca f7       	brpl	.-14     	; 0xae0 <__divsf3_pse+0x2c>
     aee:	2b d0       	rcall	.+86     	; 0xb46 <__divsf3_pse+0x92>
     af0:	fe 2f       	mov	r31, r30
     af2:	29 d0       	rcall	.+82     	; 0xb46 <__divsf3_pse+0x92>
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	88 1f       	adc	r24, r24
     afa:	bb 1f       	adc	r27, r27
     afc:	26 17       	cp	r18, r22
     afe:	37 07       	cpc	r19, r23
     b00:	48 07       	cpc	r20, r24
     b02:	ab 07       	cpc	r26, r27
     b04:	b0 e8       	ldi	r27, 0x80	; 128
     b06:	09 f0       	breq	.+2      	; 0xb0a <__divsf3_pse+0x56>
     b08:	bb 0b       	sbc	r27, r27
     b0a:	80 2d       	mov	r24, r0
     b0c:	bf 01       	movw	r22, r30
     b0e:	ff 27       	eor	r31, r31
     b10:	93 58       	subi	r25, 0x83	; 131
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	3a f0       	brmi	.+14     	; 0xb24 <__divsf3_pse+0x70>
     b16:	9e 3f       	cpi	r25, 0xFE	; 254
     b18:	51 05       	cpc	r21, r1
     b1a:	78 f0       	brcs	.+30     	; 0xb3a <__divsf3_pse+0x86>
     b1c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_inf>
     b20:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>
     b24:	5f 3f       	cpi	r21, 0xFF	; 255
     b26:	e4 f3       	brlt	.-8      	; 0xb20 <__divsf3_pse+0x6c>
     b28:	98 3e       	cpi	r25, 0xE8	; 232
     b2a:	d4 f3       	brlt	.-12     	; 0xb20 <__divsf3_pse+0x6c>
     b2c:	86 95       	lsr	r24
     b2e:	77 95       	ror	r23
     b30:	67 95       	ror	r22
     b32:	b7 95       	ror	r27
     b34:	f7 95       	ror	r31
     b36:	9f 5f       	subi	r25, 0xFF	; 255
     b38:	c9 f7       	brne	.-14     	; 0xb2c <__divsf3_pse+0x78>
     b3a:	88 0f       	add	r24, r24
     b3c:	91 1d       	adc	r25, r1
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	97 f9       	bld	r25, 7
     b44:	08 95       	ret
     b46:	e1 e0       	ldi	r30, 0x01	; 1
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	88 1f       	adc	r24, r24
     b4e:	bb 1f       	adc	r27, r27
     b50:	62 17       	cp	r22, r18
     b52:	73 07       	cpc	r23, r19
     b54:	84 07       	cpc	r24, r20
     b56:	ba 07       	cpc	r27, r26
     b58:	20 f0       	brcs	.+8      	; 0xb62 <__divsf3_pse+0xae>
     b5a:	62 1b       	sub	r22, r18
     b5c:	73 0b       	sbc	r23, r19
     b5e:	84 0b       	sbc	r24, r20
     b60:	ba 0b       	sbc	r27, r26
     b62:	ee 1f       	adc	r30, r30
     b64:	88 f7       	brcc	.-30     	; 0xb48 <__divsf3_pse+0x94>
     b66:	e0 95       	com	r30
     b68:	08 95       	ret

00000b6a <__floatunsisf>:
     b6a:	e8 94       	clt
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <__floatsisf+0x12>

00000b6e <__floatsisf>:
     b6e:	97 fb       	bst	r25, 7
     b70:	3e f4       	brtc	.+14     	; 0xb80 <__floatsisf+0x12>
     b72:	90 95       	com	r25
     b74:	80 95       	com	r24
     b76:	70 95       	com	r23
     b78:	61 95       	neg	r22
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	8f 4f       	sbci	r24, 0xFF	; 255
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	99 23       	and	r25, r25
     b82:	a9 f0       	breq	.+42     	; 0xbae <__floatsisf+0x40>
     b84:	f9 2f       	mov	r31, r25
     b86:	96 e9       	ldi	r25, 0x96	; 150
     b88:	bb 27       	eor	r27, r27
     b8a:	93 95       	inc	r25
     b8c:	f6 95       	lsr	r31
     b8e:	87 95       	ror	r24
     b90:	77 95       	ror	r23
     b92:	67 95       	ror	r22
     b94:	b7 95       	ror	r27
     b96:	f1 11       	cpse	r31, r1
     b98:	f8 cf       	rjmp	.-16     	; 0xb8a <__floatsisf+0x1c>
     b9a:	fa f4       	brpl	.+62     	; 0xbda <__floatsisf+0x6c>
     b9c:	bb 0f       	add	r27, r27
     b9e:	11 f4       	brne	.+4      	; 0xba4 <__floatsisf+0x36>
     ba0:	60 ff       	sbrs	r22, 0
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <__floatsisf+0x6c>
     ba4:	6f 5f       	subi	r22, 0xFF	; 255
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	8f 4f       	sbci	r24, 0xFF	; 255
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	16 c0       	rjmp	.+44     	; 0xbda <__floatsisf+0x6c>
     bae:	88 23       	and	r24, r24
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <__floatsisf+0x48>
     bb2:	96 e9       	ldi	r25, 0x96	; 150
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <__floatsisf+0x6a>
     bb6:	77 23       	and	r23, r23
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <__floatsisf+0x54>
     bba:	9e e8       	ldi	r25, 0x8E	; 142
     bbc:	87 2f       	mov	r24, r23
     bbe:	76 2f       	mov	r23, r22
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <__floatsisf+0x5e>
     bc2:	66 23       	and	r22, r22
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <__floatsisf+0x74>
     bc6:	96 e8       	ldi	r25, 0x86	; 134
     bc8:	86 2f       	mov	r24, r22
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	2a f0       	brmi	.+10     	; 0xbda <__floatsisf+0x6c>
     bd0:	9a 95       	dec	r25
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	da f7       	brpl	.-10     	; 0xbd0 <__floatsisf+0x62>
     bda:	88 0f       	add	r24, r24
     bdc:	96 95       	lsr	r25
     bde:	87 95       	ror	r24
     be0:	97 f9       	bld	r25, 7
     be2:	08 95       	ret

00000be4 <__fp_inf>:
     be4:	97 f9       	bld	r25, 7
     be6:	9f 67       	ori	r25, 0x7F	; 127
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	08 95       	ret

00000bf0 <__fp_nan>:
     bf0:	9f ef       	ldi	r25, 0xFF	; 255
     bf2:	80 ec       	ldi	r24, 0xC0	; 192
     bf4:	08 95       	ret

00000bf6 <__fp_pscA>:
     bf6:	00 24       	eor	r0, r0
     bf8:	0a 94       	dec	r0
     bfa:	16 16       	cp	r1, r22
     bfc:	17 06       	cpc	r1, r23
     bfe:	18 06       	cpc	r1, r24
     c00:	09 06       	cpc	r0, r25
     c02:	08 95       	ret

00000c04 <__fp_pscB>:
     c04:	00 24       	eor	r0, r0
     c06:	0a 94       	dec	r0
     c08:	12 16       	cp	r1, r18
     c0a:	13 06       	cpc	r1, r19
     c0c:	14 06       	cpc	r1, r20
     c0e:	05 06       	cpc	r0, r21
     c10:	08 95       	ret

00000c12 <__fp_round>:
     c12:	09 2e       	mov	r0, r25
     c14:	03 94       	inc	r0
     c16:	00 0c       	add	r0, r0
     c18:	11 f4       	brne	.+4      	; 0xc1e <__fp_round+0xc>
     c1a:	88 23       	and	r24, r24
     c1c:	52 f0       	brmi	.+20     	; 0xc32 <__fp_round+0x20>
     c1e:	bb 0f       	add	r27, r27
     c20:	40 f4       	brcc	.+16     	; 0xc32 <__fp_round+0x20>
     c22:	bf 2b       	or	r27, r31
     c24:	11 f4       	brne	.+4      	; 0xc2a <__fp_round+0x18>
     c26:	60 ff       	sbrs	r22, 0
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <__fp_round+0x20>
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	8f 4f       	sbci	r24, 0xFF	; 255
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	08 95       	ret

00000c34 <__fp_split3>:
     c34:	57 fd       	sbrc	r21, 7
     c36:	90 58       	subi	r25, 0x80	; 128
     c38:	44 0f       	add	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	59 f0       	breq	.+22     	; 0xc54 <__fp_splitA+0x10>
     c3e:	5f 3f       	cpi	r21, 0xFF	; 255
     c40:	71 f0       	breq	.+28     	; 0xc5e <__fp_splitA+0x1a>
     c42:	47 95       	ror	r20

00000c44 <__fp_splitA>:
     c44:	88 0f       	add	r24, r24
     c46:	97 fb       	bst	r25, 7
     c48:	99 1f       	adc	r25, r25
     c4a:	61 f0       	breq	.+24     	; 0xc64 <__fp_splitA+0x20>
     c4c:	9f 3f       	cpi	r25, 0xFF	; 255
     c4e:	79 f0       	breq	.+30     	; 0xc6e <__fp_splitA+0x2a>
     c50:	87 95       	ror	r24
     c52:	08 95       	ret
     c54:	12 16       	cp	r1, r18
     c56:	13 06       	cpc	r1, r19
     c58:	14 06       	cpc	r1, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	f2 cf       	rjmp	.-28     	; 0xc42 <__fp_split3+0xe>
     c5e:	46 95       	lsr	r20
     c60:	f1 df       	rcall	.-30     	; 0xc44 <__fp_splitA>
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <__fp_splitA+0x30>
     c64:	16 16       	cp	r1, r22
     c66:	17 06       	cpc	r1, r23
     c68:	18 06       	cpc	r1, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <__fp_splitA+0xc>
     c6e:	86 95       	lsr	r24
     c70:	71 05       	cpc	r23, r1
     c72:	61 05       	cpc	r22, r1
     c74:	08 94       	sec
     c76:	08 95       	ret

00000c78 <__fp_zero>:
     c78:	e8 94       	clt

00000c7a <__fp_szero>:
     c7a:	bb 27       	eor	r27, r27
     c7c:	66 27       	eor	r22, r22
     c7e:	77 27       	eor	r23, r23
     c80:	cb 01       	movw	r24, r22
     c82:	97 f9       	bld	r25, 7
     c84:	08 95       	ret

00000c86 <__mulsf3>:
     c86:	0e 94 56 06 	call	0xcac	; 0xcac <__mulsf3x>
     c8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__fp_round>
     c8e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_pscA>
     c92:	38 f0       	brcs	.+14     	; 0xca2 <__mulsf3+0x1c>
     c94:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscB>
     c98:	20 f0       	brcs	.+8      	; 0xca2 <__mulsf3+0x1c>
     c9a:	95 23       	and	r25, r21
     c9c:	11 f0       	breq	.+4      	; 0xca2 <__mulsf3+0x1c>
     c9e:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_inf>
     ca2:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_nan>
     ca6:	11 24       	eor	r1, r1
     ca8:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>

00000cac <__mulsf3x>:
     cac:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_split3>
     cb0:	70 f3       	brcs	.-36     	; 0xc8e <__mulsf3+0x8>

00000cb2 <__mulsf3_pse>:
     cb2:	95 9f       	mul	r25, r21
     cb4:	c1 f3       	breq	.-16     	; 0xca6 <__mulsf3+0x20>
     cb6:	95 0f       	add	r25, r21
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	55 1f       	adc	r21, r21
     cbc:	62 9f       	mul	r22, r18
     cbe:	f0 01       	movw	r30, r0
     cc0:	72 9f       	mul	r23, r18
     cc2:	bb 27       	eor	r27, r27
     cc4:	f0 0d       	add	r31, r0
     cc6:	b1 1d       	adc	r27, r1
     cc8:	63 9f       	mul	r22, r19
     cca:	aa 27       	eor	r26, r26
     ccc:	f0 0d       	add	r31, r0
     cce:	b1 1d       	adc	r27, r1
     cd0:	aa 1f       	adc	r26, r26
     cd2:	64 9f       	mul	r22, r20
     cd4:	66 27       	eor	r22, r22
     cd6:	b0 0d       	add	r27, r0
     cd8:	a1 1d       	adc	r26, r1
     cda:	66 1f       	adc	r22, r22
     cdc:	82 9f       	mul	r24, r18
     cde:	22 27       	eor	r18, r18
     ce0:	b0 0d       	add	r27, r0
     ce2:	a1 1d       	adc	r26, r1
     ce4:	62 1f       	adc	r22, r18
     ce6:	73 9f       	mul	r23, r19
     ce8:	b0 0d       	add	r27, r0
     cea:	a1 1d       	adc	r26, r1
     cec:	62 1f       	adc	r22, r18
     cee:	83 9f       	mul	r24, r19
     cf0:	a0 0d       	add	r26, r0
     cf2:	61 1d       	adc	r22, r1
     cf4:	22 1f       	adc	r18, r18
     cf6:	74 9f       	mul	r23, r20
     cf8:	33 27       	eor	r19, r19
     cfa:	a0 0d       	add	r26, r0
     cfc:	61 1d       	adc	r22, r1
     cfe:	23 1f       	adc	r18, r19
     d00:	84 9f       	mul	r24, r20
     d02:	60 0d       	add	r22, r0
     d04:	21 1d       	adc	r18, r1
     d06:	82 2f       	mov	r24, r18
     d08:	76 2f       	mov	r23, r22
     d0a:	6a 2f       	mov	r22, r26
     d0c:	11 24       	eor	r1, r1
     d0e:	9f 57       	subi	r25, 0x7F	; 127
     d10:	50 40       	sbci	r21, 0x00	; 0
     d12:	9a f0       	brmi	.+38     	; 0xd3a <__mulsf3_pse+0x88>
     d14:	f1 f0       	breq	.+60     	; 0xd52 <__mulsf3_pse+0xa0>
     d16:	88 23       	and	r24, r24
     d18:	4a f0       	brmi	.+18     	; 0xd2c <__mulsf3_pse+0x7a>
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	bb 1f       	adc	r27, r27
     d20:	66 1f       	adc	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	88 1f       	adc	r24, r24
     d26:	91 50       	subi	r25, 0x01	; 1
     d28:	50 40       	sbci	r21, 0x00	; 0
     d2a:	a9 f7       	brne	.-22     	; 0xd16 <__mulsf3_pse+0x64>
     d2c:	9e 3f       	cpi	r25, 0xFE	; 254
     d2e:	51 05       	cpc	r21, r1
     d30:	80 f0       	brcs	.+32     	; 0xd52 <__mulsf3_pse+0xa0>
     d32:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_inf>
     d36:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_szero>
     d3a:	5f 3f       	cpi	r21, 0xFF	; 255
     d3c:	e4 f3       	brlt	.-8      	; 0xd36 <__mulsf3_pse+0x84>
     d3e:	98 3e       	cpi	r25, 0xE8	; 232
     d40:	d4 f3       	brlt	.-12     	; 0xd36 <__mulsf3_pse+0x84>
     d42:	86 95       	lsr	r24
     d44:	77 95       	ror	r23
     d46:	67 95       	ror	r22
     d48:	b7 95       	ror	r27
     d4a:	f7 95       	ror	r31
     d4c:	e7 95       	ror	r30
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	c1 f7       	brne	.-16     	; 0xd42 <__mulsf3_pse+0x90>
     d52:	fe 2b       	or	r31, r30
     d54:	88 0f       	add	r24, r24
     d56:	91 1d       	adc	r25, r1
     d58:	96 95       	lsr	r25
     d5a:	87 95       	ror	r24
     d5c:	97 f9       	bld	r25, 7
     d5e:	08 95       	ret

00000d60 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d60:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d62:	91 8d       	ldd	r25, Z+25	; 0x19
     d64:	22 8d       	ldd	r18, Z+26	; 0x1a
     d66:	89 2f       	mov	r24, r25
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	80 5c       	subi	r24, 0xC0	; 192
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	82 1b       	sub	r24, r18
     d70:	91 09       	sbc	r25, r1
}
     d72:	8f 73       	andi	r24, 0x3F	; 63
     d74:	99 27       	eor	r25, r25
     d76:	08 95       	ret

00000d78 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d78:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d7a:	91 8d       	ldd	r25, Z+25	; 0x19
     d7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d7e:	98 17       	cp	r25, r24
     d80:	31 f0       	breq	.+12     	; 0xd8e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d82:	82 8d       	ldd	r24, Z+26	; 0x1a
     d84:	e8 0f       	add	r30, r24
     d86:	f1 1d       	adc	r31, r1
     d88:	85 8d       	ldd	r24, Z+29	; 0x1d
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d92:	08 95       	ret

00000d94 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d94:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d96:	91 8d       	ldd	r25, Z+25	; 0x19
     d98:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9a:	98 17       	cp	r25, r24
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d9e:	82 8d       	ldd	r24, Z+26	; 0x1a
     da0:	df 01       	movw	r26, r30
     da2:	a8 0f       	add	r26, r24
     da4:	b1 1d       	adc	r27, r1
     da6:	5d 96       	adiw	r26, 0x1d	; 29
     da8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     daa:	92 8d       	ldd	r25, Z+26	; 0x1a
     dac:	9f 5f       	subi	r25, 0xFF	; 255
     dae:	9f 73       	andi	r25, 0x3F	; 63
     db0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     dba:	08 95       	ret

00000dbc <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     dbc:	fc 01       	movw	r30, r24
     dbe:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     dc0:	44 8d       	ldd	r20, Z+28	; 0x1c
     dc2:	25 2f       	mov	r18, r21
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	84 2f       	mov	r24, r20
     dc8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     dca:	82 1b       	sub	r24, r18
     dcc:	93 0b       	sbc	r25, r19
     dce:	54 17       	cp	r21, r20
     dd0:	10 f0       	brcs	.+4      	; 0xdd6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     dd2:	cf 96       	adiw	r24, 0x3f	; 63
     dd4:	08 95       	ret
  return tail - head - 1;
     dd6:	01 97       	sbiw	r24, 0x01	; 1
}
     dd8:	08 95       	ret

00000dda <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     dda:	82 e4       	ldi	r24, 0x42	; 66
     ddc:	98 e0       	ldi	r25, 0x08	; 8
     dde:	89 2b       	or	r24, r25
     de0:	49 f0       	breq	.+18     	; 0xdf4 <_Z14serialEventRunv+0x1a>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	89 2b       	or	r24, r25
     de8:	29 f0       	breq	.+10     	; 0xdf4 <_Z14serialEventRunv+0x1a>
     dea:	0e 94 42 08 	call	0x1084	; 0x1084 <_Z17Serial0_availablev>
     dee:	81 11       	cpse	r24, r1
     df0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     df4:	08 95       	ret

00000df6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     df6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     df8:	84 8d       	ldd	r24, Z+28	; 0x1c
     dfa:	df 01       	movw	r26, r30
     dfc:	a8 0f       	add	r26, r24
     dfe:	b1 1d       	adc	r27, r1
     e00:	a3 5a       	subi	r26, 0xA3	; 163
     e02:	bf 4f       	sbci	r27, 0xFF	; 255
     e04:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     e06:	84 8d       	ldd	r24, Z+28	; 0x1c
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	8f 73       	andi	r24, 0x3F	; 63
     e0e:	99 27       	eor	r25, r25
     e10:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e12:	a6 89       	ldd	r26, Z+22	; 0x16
     e14:	b7 89       	ldd	r27, Z+23	; 0x17
     e16:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     e18:	a0 89       	ldd	r26, Z+16	; 0x10
     e1a:	b1 89       	ldd	r27, Z+17	; 0x11
     e1c:	8c 91       	ld	r24, X
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     e22:	93 8d       	ldd	r25, Z+27	; 0x1b
     e24:	84 8d       	ldd	r24, Z+28	; 0x1c
     e26:	98 13       	cpse	r25, r24
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e2a:	02 88       	ldd	r0, Z+18	; 0x12
     e2c:	f3 89       	ldd	r31, Z+19	; 0x13
     e2e:	e0 2d       	mov	r30, r0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7d       	andi	r24, 0xDF	; 223
     e34:	80 83       	st	Z, r24
     e36:	08 95       	ret

00000e38 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
  _written = true;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4e:	98 13       	cpse	r25, r24
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <_ZN14HardwareSerial5writeEh+0x24>
     e52:	e8 89       	ldd	r30, Y+16	; 0x10
     e54:	f9 89       	ldd	r31, Y+17	; 0x11
     e56:	80 81       	ld	r24, Z
     e58:	85 fd       	sbrc	r24, 5
     e5a:	24 c0       	rjmp	.+72     	; 0xea4 <_ZN14HardwareSerial5writeEh+0x6c>
     e5c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e5e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	0f 5f       	subi	r16, 0xFF	; 255
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	0f 73       	andi	r16, 0x3F	; 63
     e68:	11 27       	eor	r17, r17
     e6a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e6e:	e8 12       	cpse	r14, r24
     e70:	0c c0       	rjmp	.+24     	; 0xe8a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	07 fc       	sbrc	r0, 7
     e76:	fa cf       	rjmp	.-12     	; 0xe6c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e78:	e8 89       	ldd	r30, Y+16	; 0x10
     e7a:	f9 89       	ldd	r31, Y+17	; 0x11
     e7c:	80 81       	ld	r24, Z
     e7e:	85 ff       	sbrs	r24, 5
     e80:	f5 cf       	rjmp	.-22     	; 0xe6c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e82:	ce 01       	movw	r24, r28
     e84:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e88:	f1 cf       	rjmp	.-30     	; 0xe6c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8c:	fe 01       	movw	r30, r28
     e8e:	e8 0f       	add	r30, r24
     e90:	f1 1d       	adc	r31, r1
     e92:	e3 5a       	subi	r30, 0xA3	; 163
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     e98:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     e9a:	ea 89       	ldd	r30, Y+18	; 0x12
     e9c:	fb 89       	ldd	r31, Y+19	; 0x13
     e9e:	80 81       	ld	r24, Z
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     ea4:	ee 89       	ldd	r30, Y+22	; 0x16
     ea6:	ff 89       	ldd	r31, Y+23	; 0x17
     ea8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     eaa:	e8 89       	ldd	r30, Y+16	; 0x10
     eac:	f9 89       	ldd	r31, Y+17	; 0x11
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	08 95       	ret

00000ec6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ecc:	88 8d       	ldd	r24, Y+24	; 0x18
     ece:	88 23       	and	r24, r24
     ed0:	c9 f0       	breq	.+50     	; 0xf04 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ed2:	ea 89       	ldd	r30, Y+18	; 0x12
     ed4:	fb 89       	ldd	r31, Y+19	; 0x13
     ed6:	80 81       	ld	r24, Z
     ed8:	85 fd       	sbrc	r24, 5
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <_ZN14HardwareSerial5flushEv+0x20>
     edc:	a8 89       	ldd	r26, Y+16	; 0x10
     ede:	b9 89       	ldd	r27, Y+17	; 0x11
     ee0:	8c 91       	ld	r24, X
     ee2:	86 fd       	sbrc	r24, 6
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	07 fc       	sbrc	r0, 7
     eea:	f5 cf       	rjmp	.-22     	; 0xed6 <_ZN14HardwareSerial5flushEv+0x10>
     eec:	80 81       	ld	r24, Z
     eee:	85 ff       	sbrs	r24, 5
     ef0:	f2 cf       	rjmp	.-28     	; 0xed6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ef2:	a8 89       	ldd	r26, Y+16	; 0x10
     ef4:	b9 89       	ldd	r27, Y+17	; 0x11
     ef6:	8c 91       	ld	r24, X
     ef8:	85 ff       	sbrs	r24, 5
     efa:	ed cf       	rjmp	.-38     	; 0xed6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     efc:	ce 01       	movw	r24, r28
     efe:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f02:	e7 cf       	rjmp	.-50     	; 0xed2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
     f1a:	6a 01       	movw	r12, r20
     f1c:	7b 01       	movw	r14, r22
     f1e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f20:	e8 89       	ldd	r30, Y+16	; 0x10
     f22:	f9 89       	ldd	r31, Y+17	; 0x11
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f28:	41 15       	cp	r20, r1
     f2a:	51 4e       	sbci	r21, 0xE1	; 225
     f2c:	61 05       	cpc	r22, r1
     f2e:	71 05       	cpc	r23, r1
     f30:	b1 f0       	breq	.+44     	; 0xf5e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	79 e0       	ldi	r23, 0x09	; 9
     f36:	8d e3       	ldi	r24, 0x3D	; 61
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a7 01       	movw	r20, r14
     f3c:	96 01       	movw	r18, r12
     f3e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodsi4>
     f42:	da 01       	movw	r26, r20
     f44:	c9 01       	movw	r24, r18
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	a1 09       	sbc	r26, r1
     f4a:	b1 09       	sbc	r27, r1
     f4c:	b6 95       	lsr	r27
     f4e:	a7 95       	ror	r26
     f50:	97 95       	ror	r25
     f52:	87 95       	ror	r24
     f54:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f56:	21 15       	cp	r18, r1
     f58:	80 e1       	ldi	r24, 0x10	; 16
     f5a:	38 07       	cpc	r19, r24
     f5c:	a8 f0       	brcs	.+42     	; 0xf88 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     f5e:	e8 89       	ldd	r30, Y+16	; 0x10
     f60:	f9 89       	ldd	r31, Y+17	; 0x11
     f62:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f64:	60 e8       	ldi	r22, 0x80	; 128
     f66:	74 e8       	ldi	r23, 0x84	; 132
     f68:	8e e1       	ldi	r24, 0x1E	; 30
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a7 01       	movw	r20, r14
     f6e:	96 01       	movw	r18, r12
     f70:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodsi4>
     f74:	da 01       	movw	r26, r20
     f76:	c9 01       	movw	r24, r18
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	a1 09       	sbc	r26, r1
     f7c:	b1 09       	sbc	r27, r1
     f7e:	b6 95       	lsr	r27
     f80:	a7 95       	ror	r26
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f88:	ec 85       	ldd	r30, Y+12	; 0x0c
     f8a:	fd 85       	ldd	r31, Y+13	; 0x0d
     f8c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f8e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f90:	ff 85       	ldd	r31, Y+15	; 0x0f
     f92:	20 83       	st	Z, r18

  _written = false;
     f94:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f96:	ec 89       	ldd	r30, Y+20	; 0x14
     f98:	fd 89       	ldd	r31, Y+21	; 0x15
     f9a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f9c:	ea 89       	ldd	r30, Y+18	; 0x12
     f9e:	fb 89       	ldd	r31, Y+19	; 0x13
     fa0:	80 81       	ld	r24, Z
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     fa6:	ea 89       	ldd	r30, Y+18	; 0x12
     fa8:	fb 89       	ldd	r31, Y+19	; 0x13
     faa:	80 81       	ld	r24, Z
     fac:	88 60       	ori	r24, 0x08	; 8
     fae:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     fb0:	ea 89       	ldd	r30, Y+18	; 0x12
     fb2:	fb 89       	ldd	r31, Y+19	; 0x13
     fb4:	80 81       	ld	r24, Z
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fba:	ea 89       	ldd	r30, Y+18	; 0x12
     fbc:	fb 89       	ldd	r31, Y+19	; 0x13
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7d       	andi	r24, 0xDF	; 223
     fc2:	80 83       	st	Z, r24
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	2f 93       	push	r18
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fe8:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <Serial+0x10>
     fec:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <Serial+0x11>
     ff0:	80 81       	ld	r24, Z
     ff2:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <Serial+0x16>
     ff6:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <Serial+0x17>
     ffa:	82 fd       	sbrc	r24, 2
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ffe:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1000:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <Serial+0x19>
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1008:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <Serial+0x1a>
    100c:	82 17       	cp	r24, r18
    100e:	51 f0       	breq	.+20     	; 0x1024 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1010:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <Serial+0x19>
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	e0 5f       	subi	r30, 0xF0	; 240
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    101c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <Serial+0x19>
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1022:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    105a:	80 e1       	ldi	r24, 0x10	; 16
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1084:	80 e1       	ldi	r24, 0x10	; 16
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 b0 06 	call	0xd60	; 0xd60 <_ZN14HardwareSerial9availableEv>
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	89 2b       	or	r24, r25
    1090:	09 f4       	brne	.+2      	; 0x1094 <_Z17Serial0_availablev+0x10>
    1092:	20 e0       	ldi	r18, 0x00	; 0
}
    1094:	82 2f       	mov	r24, r18
    1096:	08 95       	ret

00001098 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1098:	e0 e1       	ldi	r30, 0x10	; 16
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    10a0:	88 ee       	ldi	r24, 0xE8	; 232
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	a0 e0       	ldi	r26, 0x00	; 0
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	84 83       	std	Z+4, r24	; 0x04
    10aa:	95 83       	std	Z+5, r25	; 0x05
    10ac:	a6 83       	std	Z+6, r26	; 0x06
    10ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10b0:	83 e3       	ldi	r24, 0x33	; 51
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
    10b8:	85 ec       	ldi	r24, 0xC5	; 197
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	95 87       	std	Z+13, r25	; 0x0d
    10be:	84 87       	std	Z+12, r24	; 0x0c
    10c0:	84 ec       	ldi	r24, 0xC4	; 196
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	97 87       	std	Z+15, r25	; 0x0f
    10c6:	86 87       	std	Z+14, r24	; 0x0e
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	91 8b       	std	Z+17, r25	; 0x11
    10ce:	80 8b       	std	Z+16, r24	; 0x10
    10d0:	81 ec       	ldi	r24, 0xC1	; 193
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	93 8b       	std	Z+19, r25	; 0x13
    10d6:	82 8b       	std	Z+18, r24	; 0x12
    10d8:	82 ec       	ldi	r24, 0xC2	; 194
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	95 8b       	std	Z+21, r25	; 0x15
    10de:	84 8b       	std	Z+20, r24	; 0x14
    10e0:	86 ec       	ldi	r24, 0xC6	; 198
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	97 8b       	std	Z+23, r25	; 0x17
    10e6:	86 8b       	std	Z+22, r24	; 0x16
    10e8:	11 8e       	std	Z+25, r1	; 0x19
    10ea:	12 8e       	std	Z+26, r1	; 0x1a
    10ec:	13 8e       	std	Z+27, r1	; 0x1b
    10ee:	14 8e       	std	Z+28, r1	; 0x1c
    10f0:	08 95       	ret

000010f2 <initVariant>:
    10f2:	08 95       	ret

000010f4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    10f4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <init>

	initVariant();
    10f8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    10fc:	0e 94 83 00 	call	0x106	; 0x106 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1100:	cd ee       	ldi	r28, 0xED	; 237
    1102:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1104:	0e 94 96 00 	call	0x12c	; 0x12c <loop>
		if (serialEventRun) serialEventRun();
    1108:	20 97       	sbiw	r28, 0x00	; 0
    110a:	e1 f3       	breq	.-8      	; 0x1104 <main+0x10>
    110c:	0e 94 ed 06 	call	0xdda	; 0xdda <_Z14serialEventRunv>
    1110:	f9 cf       	rjmp	.-14     	; 0x1104 <main+0x10>

00001112 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	6c 01       	movw	r12, r24
    1124:	7a 01       	movw	r14, r20
    1126:	8b 01       	movw	r16, r22
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	ce 15       	cp	r28, r14
    112e:	df 05       	cpc	r29, r15
    1130:	81 f0       	breq	.+32     	; 0x1152 <_ZN5Print5writeEPKhj+0x40>
    1132:	d8 01       	movw	r26, r16
    1134:	6d 91       	ld	r22, X+
    1136:	8d 01       	movw	r16, r26
    1138:	d6 01       	movw	r26, r12
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	01 90       	ld	r0, Z+
    1140:	f0 81       	ld	r31, Z
    1142:	e0 2d       	mov	r30, r0
    1144:	c6 01       	movw	r24, r12
    1146:	09 95       	icall
    1148:	89 2b       	or	r24, r25
    114a:	11 f0       	breq	.+4      	; 0x1150 <_ZN5Print5writeEPKhj+0x3e>
    114c:	21 96       	adiw	r28, 0x01	; 1
    114e:	ee cf       	rjmp	.-36     	; 0x112c <_ZN5Print5writeEPKhj+0x1a>
    1150:	7e 01       	movw	r14, r28
    1152:	c7 01       	movw	r24, r14
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	08 95       	ret

00001166 <_ZN5Print5writeEPKc>:
    1166:	61 15       	cp	r22, r1
    1168:	71 05       	cpc	r23, r1
    116a:	79 f0       	breq	.+30     	; 0x118a <_ZN5Print5writeEPKc+0x24>
    116c:	fb 01       	movw	r30, r22
    116e:	01 90       	ld	r0, Z+
    1170:	00 20       	and	r0, r0
    1172:	e9 f7       	brne	.-6      	; 0x116e <_ZN5Print5writeEPKc+0x8>
    1174:	31 97       	sbiw	r30, 0x01	; 1
    1176:	af 01       	movw	r20, r30
    1178:	46 1b       	sub	r20, r22
    117a:	57 0b       	sbc	r21, r23
    117c:	dc 01       	movw	r26, r24
    117e:	ed 91       	ld	r30, X+
    1180:	fc 91       	ld	r31, X
    1182:	02 80       	ldd	r0, Z+2	; 0x02
    1184:	f3 81       	ldd	r31, Z+3	; 0x03
    1186:	e0 2d       	mov	r30, r0
    1188:	09 94       	ijmp
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	08 95       	ret

00001190 <_ZN5Print5printEPKc>:
    1190:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <_ZN5Print5writeEPKc>

00001194 <_ZN5Print5printEc>:
    1194:	dc 01       	movw	r26, r24
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	01 90       	ld	r0, Z+
    119c:	f0 81       	ld	r31, Z
    119e:	e0 2d       	mov	r30, r0
    11a0:	09 94       	ijmp

000011a2 <_ZN5Print11printNumberEmh>:
    11a2:	8f 92       	push	r8
    11a4:	9f 92       	push	r9
    11a6:	af 92       	push	r10
    11a8:	bf 92       	push	r11
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	a1 97       	sbiw	r28, 0x21	; 33
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	7c 01       	movw	r14, r24
    11c8:	fa 01       	movw	r30, r20
    11ca:	cb 01       	movw	r24, r22
    11cc:	19 a2       	std	Y+33, r1	; 0x21
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <_ZN5Print11printNumberEmh+0x32>
    11d2:	2a e0       	ldi	r18, 0x0A	; 10
    11d4:	8e 01       	movw	r16, r28
    11d6:	0f 5d       	subi	r16, 0xDF	; 223
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	82 2e       	mov	r8, r18
    11dc:	91 2c       	mov	r9, r1
    11de:	a1 2c       	mov	r10, r1
    11e0:	b1 2c       	mov	r11, r1
    11e2:	bf 01       	movw	r22, r30
    11e4:	a5 01       	movw	r20, r10
    11e6:	94 01       	movw	r18, r8
    11e8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodsi4>
    11ec:	f9 01       	movw	r30, r18
    11ee:	ca 01       	movw	r24, r20
    11f0:	01 50       	subi	r16, 0x01	; 1
    11f2:	11 09       	sbc	r17, r1
    11f4:	6a 30       	cpi	r22, 0x0A	; 10
    11f6:	10 f4       	brcc	.+4      	; 0x11fc <_ZN5Print11printNumberEmh+0x5a>
    11f8:	60 5d       	subi	r22, 0xD0	; 208
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <_ZN5Print11printNumberEmh+0x5c>
    11fc:	69 5c       	subi	r22, 0xC9	; 201
    11fe:	d8 01       	movw	r26, r16
    1200:	6c 93       	st	X, r22
    1202:	23 2b       	or	r18, r19
    1204:	24 2b       	or	r18, r20
    1206:	25 2b       	or	r18, r21
    1208:	61 f7       	brne	.-40     	; 0x11e2 <_ZN5Print11printNumberEmh+0x40>
    120a:	b8 01       	movw	r22, r16
    120c:	c7 01       	movw	r24, r14
    120e:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5writeEPKc>
    1212:	a1 96       	adiw	r28, 0x21	; 33
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	08 95       	ret

00001234 <_ZN5Print5printEmi>:
    1234:	21 15       	cp	r18, r1
    1236:	31 05       	cpc	r19, r1
    1238:	41 f4       	brne	.+16     	; 0x124a <_ZN5Print5printEmi+0x16>
    123a:	dc 01       	movw	r26, r24
    123c:	ed 91       	ld	r30, X+
    123e:	fc 91       	ld	r31, X
    1240:	01 90       	ld	r0, Z+
    1242:	f0 81       	ld	r31, Z
    1244:	e0 2d       	mov	r30, r0
    1246:	64 2f       	mov	r22, r20
    1248:	09 94       	ijmp
    124a:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_ZN5Print11printNumberEmh>

0000124e <_ZN5Print5printEhi>:
    124e:	9a 01       	movw	r18, r20
    1250:	46 2f       	mov	r20, r22
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_ZN5Print5printEmi>

0000125c <_ZN5Print5printEji>:
    125c:	9a 01       	movw	r18, r20
    125e:	ab 01       	movw	r20, r22
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_ZN5Print5printEmi>

00001268 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	8c 01       	movw	r16, r24
    1284:	6a 01       	movw	r12, r20
    1286:	7b 01       	movw	r14, r22
    1288:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    128a:	9a 01       	movw	r18, r20
    128c:	ab 01       	movw	r20, r22
    128e:	c7 01       	movw	r24, r14
    1290:	b6 01       	movw	r22, r12
    1292:	0e 94 ad 0b 	call	0x175a	; 0x175a <__unordsf2>
    1296:	88 23       	and	r24, r24
    1298:	19 f0       	breq	.+6      	; 0x12a0 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    129a:	64 e4       	ldi	r22, 0x44	; 68
    129c:	71 e0       	ldi	r23, 0x01	; 1
    129e:	27 c0       	rjmp	.+78     	; 0x12ee <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    12a0:	46 01       	movw	r8, r12
    12a2:	57 01       	movw	r10, r14
    12a4:	e8 94       	clt
    12a6:	b7 f8       	bld	r11, 7
    12a8:	2f ef       	ldi	r18, 0xFF	; 255
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	5f e7       	ldi	r21, 0x7F	; 127
    12b0:	c5 01       	movw	r24, r10
    12b2:	b4 01       	movw	r22, r8
    12b4:	0e 94 ad 0b 	call	0x175a	; 0x175a <__unordsf2>
    12b8:	81 11       	cpse	r24, r1
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <_ZN5Print10printFloatEdh+0x6e>
    12bc:	2f ef       	ldi	r18, 0xFF	; 255
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	5f e7       	ldi	r21, 0x7F	; 127
    12c4:	c5 01       	movw	r24, r10
    12c6:	b4 01       	movw	r22, r8
    12c8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__cmpsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	1c f4       	brge	.+6      	; 0x12d6 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    12d0:	68 e4       	ldi	r22, 0x48	; 72
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    12d6:	2f ef       	ldi	r18, 0xFF	; 255
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	4f e7       	ldi	r20, 0x7F	; 127
    12dc:	5f e4       	ldi	r21, 0x4F	; 79
    12de:	c7 01       	movw	r24, r14
    12e0:	b6 01       	movw	r22, r12
    12e2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__gesf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	94 f4       	brge	.+36     	; 0x130e <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    12ea:	6c e4       	ldi	r22, 0x4C	; 76
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	8f 90       	pop	r8
    1308:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    130a:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    130e:	2f ef       	ldi	r18, 0xFF	; 255
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	5f ec       	ldi	r21, 0xCF	; 207
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__cmpsf2>
    131e:	87 fd       	sbrc	r24, 7
    1320:	e4 cf       	rjmp	.-56     	; 0x12ea <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__cmpsf2>
    1330:	87 ff       	sbrs	r24, 7
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1334:	6d e2       	ldi	r22, 0x2D	; 45
    1336:	c8 01       	movw	r24, r16
    1338:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN5Print5printEc>
    133c:	ec 01       	movw	r28, r24
     number = -number;
    133e:	f7 fa       	bst	r15, 7
    1340:	f0 94       	com	r15
    1342:	f7 f8       	bld	r15, 7
    1344:	f0 94       	com	r15
    1346:	02 c0       	rjmp	.+4      	; 0x134c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1348:	c0 e0       	ldi	r28, 0x00	; 0
    134a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    134c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1356:	7b 14       	cp	r7, r11
    1358:	41 f0       	breq	.+16     	; 0x136a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1366:	b3 94       	inc	r11
    1368:	f6 cf       	rjmp	.-20     	; 0x1356 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    136a:	a7 01       	movw	r20, r14
    136c:	96 01       	movw	r18, r12
    136e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
    1372:	6b 01       	movw	r12, r22
    1374:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1376:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__fixunssfsi>
    137a:	4b 01       	movw	r8, r22
    137c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    137e:	2a e0       	ldi	r18, 0x0A	; 10
    1380:	ab 01       	movw	r20, r22
    1382:	bc 01       	movw	r22, r24
    1384:	c8 01       	movw	r24, r16
    1386:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    138a:	c8 0f       	add	r28, r24
    138c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    138e:	77 20       	and	r7, r7
    1390:	b9 f1       	breq	.+110    	; 0x1400 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1392:	c5 01       	movw	r24, r10
    1394:	b4 01       	movw	r22, r8
    1396:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__floatunsisf>
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
    13a6:	6b 01       	movw	r12, r22
    13a8:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    13aa:	6e e2       	ldi	r22, 0x2E	; 46
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN5Print5printEc>
    13b2:	c8 0f       	add	r28, r24
    13b4:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e2       	ldi	r20, 0x20	; 32
    13bc:	51 e4       	ldi	r21, 0x41	; 65
    13be:	c7 01       	movw	r24, r14
    13c0:	b6 01       	movw	r22, r12
    13c2:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsf3>
    13c6:	4b 01       	movw	r8, r22
    13c8:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    13ca:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__fixunssfsi>
    13ce:	6b 01       	movw	r12, r22
    13d0:	7c 01       	movw	r14, r24
    n += print(toPrint);
    13d2:	4a e0       	ldi	r20, 0x0A	; 10
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	c8 01       	movw	r24, r16
    13d8:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN5Print5printEji>
    13dc:	c8 0f       	add	r28, r24
    13de:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    13e0:	b6 01       	movw	r22, r12
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__floatunsisf>
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	c5 01       	movw	r24, r10
    13f0:	b4 01       	movw	r22, r8
    13f2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__subsf3>
    13f6:	6b 01       	movw	r12, r22
    13f8:	7c 01       	movw	r14, r24
    13fa:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    13fc:	71 10       	cpse	r7, r1
    13fe:	db cf       	rjmp	.-74     	; 0x13b6 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1400:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	bf 90       	pop	r11
    1414:	af 90       	pop	r10
    1416:	9f 90       	pop	r9
    1418:	8f 90       	pop	r8
    141a:	7f 90       	pop	r7
    141c:	08 95       	ret

0000141e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    141e:	0c 94 34 09 	jmp	0x1268	; 0x1268 <_ZN5Print10printFloatEdh>

00001422 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <timer0_millis>
    143c:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <timer0_millis+0x1>
    1440:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <timer0_millis+0x2>
    1444:	b0 91 b1 02 	lds	r27, 0x02B1	; 0x8002b1 <timer0_millis+0x3>
    1448:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <timer0_fract>
    144c:	23 e0       	ldi	r18, 0x03	; 3
    144e:	23 0f       	add	r18, r19
    1450:	2d 37       	cpi	r18, 0x7D	; 125
    1452:	20 f4       	brcc	.+8      	; 0x145c <__vector_16+0x3a>
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	a1 1d       	adc	r26, r1
    1458:	b1 1d       	adc	r27, r1
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <__vector_16+0x44>
    145c:	26 e8       	ldi	r18, 0x86	; 134
    145e:	23 0f       	add	r18, r19
    1460:	02 96       	adiw	r24, 0x02	; 2
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <timer0_fract>
    146a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <timer0_millis>
    146e:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <timer0_millis+0x1>
    1472:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <timer0_millis+0x2>
    1476:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <timer0_millis+0x3>
    147a:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_overflow_count>
    147e:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x1>
    1482:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_overflow_count+0x2>
    1486:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_overflow_count+0x3>
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	a1 1d       	adc	r26, r1
    148e:	b1 1d       	adc	r27, r1
    1490:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <timer0_overflow_count>
    1494:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <timer0_overflow_count+0x1>
    1498:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <timer0_overflow_count+0x2>
    149c:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <timer0_overflow_count+0x3>
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <micros>:
    14b6:	3f b7       	in	r19, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_overflow_count>
    14be:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x1>
    14c2:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_overflow_count+0x2>
    14c6:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_overflow_count+0x3>
    14ca:	26 b5       	in	r18, 0x26	; 38
    14cc:	a8 9b       	sbis	0x15, 0	; 21
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <micros+0x24>
    14d0:	2f 3f       	cpi	r18, 0xFF	; 255
    14d2:	19 f0       	breq	.+6      	; 0x14da <micros+0x24>
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	b1 1d       	adc	r27, r1
    14da:	3f bf       	out	0x3f, r19	; 63
    14dc:	ba 2f       	mov	r27, r26
    14de:	a9 2f       	mov	r26, r25
    14e0:	98 2f       	mov	r25, r24
    14e2:	88 27       	eor	r24, r24
    14e4:	82 0f       	add	r24, r18
    14e6:	91 1d       	adc	r25, r1
    14e8:	a1 1d       	adc	r26, r1
    14ea:	b1 1d       	adc	r27, r1
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	42 e0       	ldi	r20, 0x02	; 2
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	4a 95       	dec	r20
    14fc:	d1 f7       	brne	.-12     	; 0x14f2 <micros+0x3c>
    14fe:	08 95       	ret

00001500 <delay>:
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	6b 01       	movw	r12, r22
    1512:	7c 01       	movw	r14, r24
    1514:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <micros>
    1518:	4b 01       	movw	r8, r22
    151a:	5c 01       	movw	r10, r24
    151c:	c1 14       	cp	r12, r1
    151e:	d1 04       	cpc	r13, r1
    1520:	e1 04       	cpc	r14, r1
    1522:	f1 04       	cpc	r15, r1
    1524:	01 f1       	breq	.+64     	; 0x1566 <delay+0x66>
    1526:	0e 94 4f 0b 	call	0x169e	; 0x169e <yield>
    152a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <micros>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	88 19       	sub	r24, r8
    1534:	99 09       	sbc	r25, r9
    1536:	aa 09       	sbc	r26, r10
    1538:	bb 09       	sbc	r27, r11
    153a:	88 3e       	cpi	r24, 0xE8	; 232
    153c:	93 40       	sbci	r25, 0x03	; 3
    153e:	a1 05       	cpc	r26, r1
    1540:	b1 05       	cpc	r27, r1
    1542:	60 f3       	brcs	.-40     	; 0x151c <delay+0x1c>
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	c2 1a       	sub	r12, r18
    1548:	d1 08       	sbc	r13, r1
    154a:	e1 08       	sbc	r14, r1
    154c:	f1 08       	sbc	r15, r1
    154e:	88 ee       	ldi	r24, 0xE8	; 232
    1550:	88 0e       	add	r8, r24
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	98 1e       	adc	r9, r24
    1556:	a1 1c       	adc	r10, r1
    1558:	b1 1c       	adc	r11, r1
    155a:	c1 14       	cp	r12, r1
    155c:	d1 04       	cpc	r13, r1
    155e:	e1 04       	cpc	r14, r1
    1560:	f1 04       	cpc	r15, r1
    1562:	19 f7       	brne	.-58     	; 0x152a <delay+0x2a>
    1564:	db cf       	rjmp	.-74     	; 0x151c <delay+0x1c>
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	08 95       	ret

00001578 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1578:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    157a:	84 b5       	in	r24, 0x24	; 36
    157c:	82 60       	ori	r24, 0x02	; 2
    157e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1580:	84 b5       	in	r24, 0x24	; 36
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1586:	85 b5       	in	r24, 0x25	; 37
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    158c:	85 b5       	in	r24, 0x25	; 37
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1592:	ee e6       	ldi	r30, 0x6E	; 110
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    159c:	e1 e8       	ldi	r30, 0x81	; 129
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    15a2:	80 81       	ld	r24, Z
    15a4:	82 60       	ori	r24, 0x02	; 2
    15a6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15ae:	e0 e8       	ldi	r30, 0x80	; 128
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    15b8:	e1 eb       	ldi	r30, 0xB1	; 177
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	84 60       	ori	r24, 0x04	; 4
    15c0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    15c2:	e0 eb       	ldi	r30, 0xB0	; 176
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    15cc:	ea e7       	ldi	r30, 0x7A	; 122
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	84 60       	ori	r24, 0x04	; 4
    15d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    15d6:	80 81       	ld	r24, Z
    15d8:	82 60       	ori	r24, 0x02	; 2
    15da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    15dc:	80 81       	ld	r24, Z
    15de:	81 60       	ori	r24, 0x01	; 1
    15e0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    15e2:	80 81       	ld	r24, Z
    15e4:	80 68       	ori	r24, 0x80	; 128
    15e6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    15ec:	08 95       	ret

000015ee <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	81 f0       	breq	.+32     	; 0x1612 <turnOffPWM+0x24>
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <turnOffPWM+0x10>
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	99 f0       	breq	.+38     	; 0x161e <turnOffPWM+0x30>
    15f8:	82 30       	cpi	r24, 0x02	; 2
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <turnOffPWM+0x36>
    15fc:	08 95       	ret
    15fe:	87 30       	cpi	r24, 0x07	; 7
    1600:	a9 f0       	breq	.+42     	; 0x162c <turnOffPWM+0x3e>
    1602:	88 30       	cpi	r24, 0x08	; 8
    1604:	b9 f0       	breq	.+46     	; 0x1634 <turnOffPWM+0x46>
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	d1 f4       	brne	.+52     	; 0x163e <turnOffPWM+0x50>
    160a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    160e:	8f 7d       	andi	r24, 0xDF	; 223
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <turnOffPWM+0x2a>
    1612:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1616:	8f 77       	andi	r24, 0x7F	; 127
    1618:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    161c:	08 95       	ret
    161e:	84 b5       	in	r24, 0x24	; 36
    1620:	8f 77       	andi	r24, 0x7F	; 127
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <turnOffPWM+0x3a>
    1624:	84 b5       	in	r24, 0x24	; 36
    1626:	8f 7d       	andi	r24, 0xDF	; 223
    1628:	84 bd       	out	0x24, r24	; 36
    162a:	08 95       	ret
    162c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	03 c0       	rjmp	.+6      	; 0x163a <turnOffPWM+0x4c>
    1634:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1638:	8f 7d       	andi	r24, 0xDF	; 223
    163a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    163e:	08 95       	ret

00001640 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	f9 01       	movw	r30, r18
    164c:	e8 59       	subi	r30, 0x98	; 152
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1652:	f9 01       	movw	r30, r18
    1654:	e4 58       	subi	r30, 0x84	; 132
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    165a:	f9 01       	movw	r30, r18
    165c:	e0 57       	subi	r30, 0x70	; 112
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1662:	cc 23       	and	r28, r28
    1664:	c1 f0       	breq	.+48     	; 0x1696 <digitalWrite+0x56>
    1666:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1668:	81 11       	cpse	r24, r1
    166a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <turnOffPWM>

	out = portOutputRegister(port);
    166e:	ec 2f       	mov	r30, r28
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ec 55       	subi	r30, 0x5C	; 92
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	a5 91       	lpm	r26, Z+
    167c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    167e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1680:	f8 94       	cli

	if (val == LOW) {
    1682:	11 11       	cpse	r17, r1
    1684:	04 c0       	rjmp	.+8      	; 0x168e <digitalWrite+0x4e>
		*out &= ~bit;
    1686:	8c 91       	ld	r24, X
    1688:	d0 95       	com	r29
    168a:	d8 23       	and	r29, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <digitalWrite+0x52>
	} else {
		*out |= bit;
    168e:	ec 91       	ld	r30, X
    1690:	de 2b       	or	r29, r30
    1692:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1694:	9f bf       	out	0x3f, r25	; 63
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	08 95       	ret

0000169e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    169e:	08 95       	ret

000016a0 <__cmpsf2>:
    16a0:	0e 94 84 0b 	call	0x1708	; 0x1708 <__fp_cmp>
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <__cmpsf2+0x8>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	08 95       	ret

000016aa <__fixunssfsi>:
    16aa:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_splitA>
    16ae:	88 f0       	brcs	.+34     	; 0x16d2 <__fixunssfsi+0x28>
    16b0:	9f 57       	subi	r25, 0x7F	; 127
    16b2:	98 f0       	brcs	.+38     	; 0x16da <__fixunssfsi+0x30>
    16b4:	b9 2f       	mov	r27, r25
    16b6:	99 27       	eor	r25, r25
    16b8:	b7 51       	subi	r27, 0x17	; 23
    16ba:	b0 f0       	brcs	.+44     	; 0x16e8 <__fixunssfsi+0x3e>
    16bc:	e1 f0       	breq	.+56     	; 0x16f6 <__fixunssfsi+0x4c>
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	1a f0       	brmi	.+6      	; 0x16ce <__fixunssfsi+0x24>
    16c8:	ba 95       	dec	r27
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__fixunssfsi+0x14>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <__fixunssfsi+0x4c>
    16ce:	b1 30       	cpi	r27, 0x01	; 1
    16d0:	91 f0       	breq	.+36     	; 0x16f6 <__fixunssfsi+0x4c>
    16d2:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_zero>
    16d6:	b1 e0       	ldi	r27, 0x01	; 1
    16d8:	08 95       	ret
    16da:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_zero>
    16de:	67 2f       	mov	r22, r23
    16e0:	78 2f       	mov	r23, r24
    16e2:	88 27       	eor	r24, r24
    16e4:	b8 5f       	subi	r27, 0xF8	; 248
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <__fixunssfsi+0x4c>
    16e8:	b9 3f       	cpi	r27, 0xF9	; 249
    16ea:	cc f3       	brlt	.-14     	; 0x16de <__fixunssfsi+0x34>
    16ec:	86 95       	lsr	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b3 95       	inc	r27
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <__fixunssfsi+0x42>
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__fixunssfsi+0x5c>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	08 95       	ret

00001708 <__fp_cmp>:
    1708:	99 0f       	add	r25, r25
    170a:	00 08       	sbc	r0, r0
    170c:	55 0f       	add	r21, r21
    170e:	aa 0b       	sbc	r26, r26
    1710:	e0 e8       	ldi	r30, 0x80	; 128
    1712:	fe ef       	ldi	r31, 0xFE	; 254
    1714:	16 16       	cp	r1, r22
    1716:	17 06       	cpc	r1, r23
    1718:	e8 07       	cpc	r30, r24
    171a:	f9 07       	cpc	r31, r25
    171c:	c0 f0       	brcs	.+48     	; 0x174e <__fp_cmp+0x46>
    171e:	12 16       	cp	r1, r18
    1720:	13 06       	cpc	r1, r19
    1722:	e4 07       	cpc	r30, r20
    1724:	f5 07       	cpc	r31, r21
    1726:	98 f0       	brcs	.+38     	; 0x174e <__fp_cmp+0x46>
    1728:	62 1b       	sub	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	95 0b       	sbc	r25, r21
    1730:	39 f4       	brne	.+14     	; 0x1740 <__fp_cmp+0x38>
    1732:	0a 26       	eor	r0, r26
    1734:	61 f0       	breq	.+24     	; 0x174e <__fp_cmp+0x46>
    1736:	23 2b       	or	r18, r19
    1738:	24 2b       	or	r18, r20
    173a:	25 2b       	or	r18, r21
    173c:	21 f4       	brne	.+8      	; 0x1746 <__fp_cmp+0x3e>
    173e:	08 95       	ret
    1740:	0a 26       	eor	r0, r26
    1742:	09 f4       	brne	.+2      	; 0x1746 <__fp_cmp+0x3e>
    1744:	a1 40       	sbci	r26, 0x01	; 1
    1746:	a6 95       	lsr	r26
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	81 1d       	adc	r24, r1
    174c:	81 1d       	adc	r24, r1
    174e:	08 95       	ret

00001750 <__gesf2>:
    1750:	0e 94 84 0b 	call	0x1708	; 0x1708 <__fp_cmp>
    1754:	08 f4       	brcc	.+2      	; 0x1758 <__gesf2+0x8>
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	08 95       	ret

0000175a <__unordsf2>:
    175a:	0e 94 84 0b 	call	0x1708	; 0x1708 <__fp_cmp>
    175e:	88 0b       	sbc	r24, r24
    1760:	99 0b       	sbc	r25, r25
    1762:	08 95       	ret

00001764 <__udivmodsi4>:
    1764:	a1 e2       	ldi	r26, 0x21	; 33
    1766:	1a 2e       	mov	r1, r26
    1768:	aa 1b       	sub	r26, r26
    176a:	bb 1b       	sub	r27, r27
    176c:	fd 01       	movw	r30, r26
    176e:	0d c0       	rjmp	.+26     	; 0x178a <__udivmodsi4_ep>

00001770 <__udivmodsi4_loop>:
    1770:	aa 1f       	adc	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	ee 1f       	adc	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	a2 17       	cp	r26, r18
    177a:	b3 07       	cpc	r27, r19
    177c:	e4 07       	cpc	r30, r20
    177e:	f5 07       	cpc	r31, r21
    1780:	20 f0       	brcs	.+8      	; 0x178a <__udivmodsi4_ep>
    1782:	a2 1b       	sub	r26, r18
    1784:	b3 0b       	sbc	r27, r19
    1786:	e4 0b       	sbc	r30, r20
    1788:	f5 0b       	sbc	r31, r21

0000178a <__udivmodsi4_ep>:
    178a:	66 1f       	adc	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	1a 94       	dec	r1
    1794:	69 f7       	brne	.-38     	; 0x1770 <__udivmodsi4_loop>
    1796:	60 95       	com	r22
    1798:	70 95       	com	r23
    179a:	80 95       	com	r24
    179c:	90 95       	com	r25
    179e:	9b 01       	movw	r18, r22
    17a0:	ac 01       	movw	r20, r24
    17a2:	bd 01       	movw	r22, r26
    17a4:	cf 01       	movw	r24, r30
    17a6:	08 95       	ret

000017a8 <__tablejump2__>:
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	05 90       	lpm	r0, Z+
    17ae:	f4 91       	lpm	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	09 94       	ijmp

000017b4 <_exit>:
    17b4:	f8 94       	cli

000017b6 <__stop_program>:
    17b6:	ff cf       	rjmp	.-2      	; 0x17b6 <__stop_program>
